{
  "chrome": {
    "31.0": {
      "all": {
        "passed": 1424,
        "failed": 73,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "AssertionError: undefined === 1\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37575:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "AssertionError: undefined === true\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37579:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "AssertionError: undefined === null\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37583:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37591:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "AssertionError: undefined === [object Object]\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37595:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "AssertionError: undefined === /./\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37599:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "AssertionError: undefined === NaN\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37603:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "AssertionError: undefined === function (){}\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37607:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37615:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "AssertionError: function () {\n            getter.call(Symbol());\n        } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37624:18)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38173:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38186:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38213:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: shouldn't remove zero width space characters as they are not in the Zs Unicode category\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38399:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "shouldn't remove zero width space characters as they are not in the Zs Unicode category",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.link works on strings correctly",
            "stack": "AssertionError: <a href=\"&lt;\"><</a> deepEqual <a href=\"<\"><</a>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39077:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<a href=\"&lt;\"><</a> deepEqual <a href=\"<\"><</a>",
            "failingSuite": "String.prototype.link"
          },
          {
            "result": false,
            "name": "String.prototype.fontsize works on strings correctly",
            "stack": "AssertionError: <font size=\"&lt;\"><</font> deepEqual <font size=\"<\"><</font>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39248:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<font size=\"&lt;\"><</font> deepEqual <font size=\"<\"><</font>",
            "failingSuite": "String.prototype.fontsize"
          },
          {
            "result": false,
            "name": "String.prototype.fontcolor works on strings correctly",
            "stack": "AssertionError: <font color=\"&lt;\"><</font> deepEqual <font color=\"<\"><</font>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39303:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<font color=\"&lt;\"><</font> deepEqual <font color=\"<\"><</font>",
            "failingSuite": "String.prototype.fontcolor"
          },
          {
            "result": false,
            "name": "String.prototype.anchor works on strings correctly",
            "stack": "AssertionError: <a name=\"&lt;\"><</a> deepEqual <a name=\"<\"><</a>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39813:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<a name=\"&lt;\"><</a> deepEqual <a name=\"<\"><</a>",
            "failingSuite": "String.prototype.anchor"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Promise.prototype.finally is not enumerable",
            "stack": "AssertionError: true === false",
            "message": "true === false",
            "failingSuite": "Promise.prototype.finally"
          },
          {
            "result": false,
            "name": "Promise.prototype.finally onFinally no callback from resolved",
            "stack": "Error: should not be called\n    at onRejected (test?includePolyfills=yes:41569:12)\n    at X (test?includePolyfills=yes:24646:3815)\n    at Y (test?includePolyfills=yes:24646:911)\n    at test?includePolyfills=yes:24646:2974\n    at i (test?includePolyfills=yes:24646:1049)",
            "message": "should not be called",
            "failingSuite": "Promise.prototype.finally"
          },
          {
            "result": false,
            "name": "Promise.prototype.finally onFinally no callback from rejected",
            "stack": "AssertionError: TypeError: undefined is not a function === [object Object]",
            "message": "TypeError: undefined is not a function === [object Object]",
            "failingSuite": "Promise.prototype.finally"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `undefined`",
            "stack": "AssertionError: function () {\n        Object.seal(undefined);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42235:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(undefined);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `null`",
            "stack": "AssertionError: function () {\n        Object.seal(null);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42241:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(null);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `true`",
            "stack": "AssertionError: function () {\n        Object.seal(true);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42247:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(true);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `false`",
            "stack": "AssertionError: function () {\n        Object.seal(false);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42253:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(false);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a string",
            "stack": "AssertionError: function () {\n        Object.seal('a');\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42259:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal('a');\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a number",
            "stack": "AssertionError: function () {\n        Object.seal(0);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42265:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(0);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal returns the argument",
            "stack": "TypeError: Object.seal called on non-object\n    at Function.seal (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42279:33)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.seal called on non-object",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.preventExtensions does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.preventExtensions(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42320:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.preventExtensions(1);\n    } !throws undefined",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.preventExtensions returns argument if given a primitive",
            "stack": "TypeError: Object.preventExtension called on non-object\n    at Function.preventExtensions (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42338:37)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.preventExtension called on non-object",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.isSealed does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isSealed(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42514:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isSealed(1);\n    } !throws undefined",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isSealed returns true for primitives",
            "stack": "TypeError: Object.isSealed called on non-object\n    at Function.isSealed (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42532:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isSealed called on non-object",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isFrozen does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isFrozen(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42571:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isFrozen(1);\n    } !throws undefined",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isFrozen returns true for primitives",
            "stack": "TypeError: Object.isFrozen called on non-object\n    at Function.isFrozen (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42589:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isFrozen called on non-object",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isExtensible does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isExtensible(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42628:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isExtensible(1);\n    } !throws undefined",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.isExtensible returns false for primitives",
            "stack": "TypeError: Object.isExtensible called on non-object\n    at Function.isExtensible (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42646:29)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isExtensible called on non-object",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames returns an empty array for booleans and numbers",
            "stack": "TypeError: Object.getOwnPropertyNames called on non-object\n    at getOwnPropertyNames (native)\n    at getOwnPropertyNames (test?includePolyfills=yes:26964:10)\n    at Function.getOwnPropertyNames (test?includePolyfills=yes:27087:10)\n    at Context.<anonymous> (test?includePolyfills=yes:42775:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7",
            "message": "Object.getOwnPropertyNames called on non-object",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames splits a string into an array",
            "stack": "TypeError: Object.getOwnPropertyNames called on non-object\n    at getOwnPropertyNames (native)\n    at getOwnPropertyNames (test?includePolyfills=yes:26964:10)\n    at Function.getOwnPropertyNames (test?includePolyfills=yes:27087:10)\n    at Context.<anonymous> (test?includePolyfills=yes:42780:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7",
            "message": "Object.getOwnPropertyNames called on non-object",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "AssertionError: defineProp === defineProperty",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:415:3)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:415:3)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "AssertionError: function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50147:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "Object.isSealed",
          "String.prototype.@@iterator",
          "Object.getOwnPropertyNames",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "String.raw",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "smoothscroll",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Object.preventExtensions",
          "Symbol.hasInstance",
          "Promise.prototype.finally",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "String.prototype.fontsize",
          "String.prototype.trim",
          "Object.isExtensible",
          "String.prototype.anchor",
          "document.currentScript",
          "Array.prototype.@@iterator",
          "Object.isFrozen",
          "String.prototype.fontcolor",
          "Object.seal",
          "Map",
          "String.prototype.link",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "33.0": {
      "all": {
        "passed": 1426,
        "failed": 71,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "AssertionError: undefined === 1\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37575:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "AssertionError: undefined === true\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37579:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "AssertionError: undefined === null\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37583:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37591:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "AssertionError: undefined === [object Object]\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37595:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "AssertionError: undefined === /./\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37599:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "AssertionError: undefined === NaN\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37603:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "AssertionError: undefined === function (){}\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37607:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37615:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "AssertionError: function () {\n            getter.call(Symbol());\n        } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37624:18)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38173:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38186:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38213:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: shouldn't remove zero width space characters as they are not in the Zs Unicode category\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38399:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "shouldn't remove zero width space characters as they are not in the Zs Unicode category",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.link works on strings correctly",
            "stack": "AssertionError: <a href=\"&lt;\"><</a> deepEqual <a href=\"<\"><</a>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39077:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<a href=\"&lt;\"><</a> deepEqual <a href=\"<\"><</a>",
            "failingSuite": "String.prototype.link"
          },
          {
            "result": false,
            "name": "String.prototype.fontsize works on strings correctly",
            "stack": "AssertionError: <font size=\"&lt;\"><</font> deepEqual <font size=\"<\"><</font>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39248:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<font size=\"&lt;\"><</font> deepEqual <font size=\"<\"><</font>",
            "failingSuite": "String.prototype.fontsize"
          },
          {
            "result": false,
            "name": "String.prototype.fontcolor works on strings correctly",
            "stack": "AssertionError: <font color=\"&lt;\"><</font> deepEqual <font color=\"<\"><</font>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39303:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<font color=\"&lt;\"><</font> deepEqual <font color=\"<\"><</font>",
            "failingSuite": "String.prototype.fontcolor"
          },
          {
            "result": false,
            "name": "String.prototype.anchor works on strings correctly",
            "stack": "AssertionError: <a name=\"&lt;\"><</a> deepEqual <a name=\"<\"><</a>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39813:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<a name=\"&lt;\"><</a> deepEqual <a name=\"<\"><</a>",
            "failingSuite": "String.prototype.anchor"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `undefined`",
            "stack": "AssertionError: function () {\n        Object.seal(undefined);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42235:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(undefined);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `null`",
            "stack": "AssertionError: function () {\n        Object.seal(null);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42241:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(null);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `true`",
            "stack": "AssertionError: function () {\n        Object.seal(true);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42247:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(true);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `false`",
            "stack": "AssertionError: function () {\n        Object.seal(false);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42253:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(false);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a string",
            "stack": "AssertionError: function () {\n        Object.seal('a');\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42259:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal('a');\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a number",
            "stack": "AssertionError: function () {\n        Object.seal(0);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42265:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(0);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal returns the argument",
            "stack": "TypeError: Object.seal called on non-object\n    at Function.seal (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42279:33)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.seal called on non-object",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.preventExtensions does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.preventExtensions(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42320:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.preventExtensions(1);\n    } !throws undefined",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.preventExtensions returns argument if given a primitive",
            "stack": "TypeError: Object.preventExtension called on non-object\n    at Function.preventExtensions (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42338:37)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.preventExtension called on non-object",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.isSealed does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isSealed(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42514:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isSealed(1);\n    } !throws undefined",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isSealed returns true for primitives",
            "stack": "TypeError: Object.isSealed called on non-object\n    at Function.isSealed (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42532:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isSealed called on non-object",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isFrozen does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isFrozen(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42571:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isFrozen(1);\n    } !throws undefined",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isFrozen returns true for primitives",
            "stack": "TypeError: Object.isFrozen called on non-object\n    at Function.isFrozen (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42589:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isFrozen called on non-object",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isExtensible does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isExtensible(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42628:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isExtensible(1);\n    } !throws undefined",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.isExtensible returns false for primitives",
            "stack": "TypeError: Object.isExtensible called on non-object\n    at Function.isExtensible (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42646:29)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isExtensible called on non-object",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames returns an empty array for booleans and numbers",
            "stack": "TypeError: Object.getOwnPropertyNames called on non-object\n    at getOwnPropertyNames (native)\n    at getOwnPropertyNames (test?includePolyfills=yes:26964:10)\n    at Function.getOwnPropertyNames (test?includePolyfills=yes:27087:10)\n    at Context.<anonymous> (test?includePolyfills=yes:42775:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7",
            "message": "Object.getOwnPropertyNames called on non-object",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames splits a string into an array",
            "stack": "TypeError: Object.getOwnPropertyNames called on non-object\n    at getOwnPropertyNames (native)\n    at getOwnPropertyNames (test?includePolyfills=yes:26964:10)\n    at Function.getOwnPropertyNames (test?includePolyfills=yes:27087:10)\n    at Context.<anonymous> (test?includePolyfills=yes:42780:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7",
            "message": "Object.getOwnPropertyNames called on non-object",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "AssertionError: defineProp === defineProperty\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Function.proclaim.hasName (test?includePolyfills=yes:17243:13)\n    at Context.<anonymous> (test?includePolyfills=yes:43523:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "AssertionError: function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50147:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests fetch without aborting",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "Object.isSealed",
          "String.prototype.@@iterator",
          "Object.getOwnPropertyNames",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "String.raw",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "smoothscroll",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Object.preventExtensions",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "String.prototype.fontsize",
          "String.prototype.trim",
          "Object.isExtensible",
          "String.prototype.anchor",
          "document.currentScript",
          "AbortController",
          "Array.prototype.@@iterator",
          "Object.isFrozen",
          "String.prototype.fontcolor",
          "Object.seal",
          "Map",
          "String.prototype.link",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "32.0": {
      "all": {
        "passed": 1419,
        "failed": 78,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "AssertionError: undefined === 1\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37575:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "AssertionError: undefined === true\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37579:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "AssertionError: undefined === null\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37583:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37591:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "AssertionError: undefined === [object Object]\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37595:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "AssertionError: undefined === /./\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37599:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "AssertionError: undefined === NaN\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37603:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "AssertionError: undefined === function (){}\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37607:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37615:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "AssertionError: function () {\n            getter.call(Symbol());\n        } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37624:18)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38173:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38186:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38213:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: shouldn't remove zero width space characters as they are not in the Zs Unicode category\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38399:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "shouldn't remove zero width space characters as they are not in the Zs Unicode category",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.link works on strings correctly",
            "stack": "AssertionError: <a href=\"&lt;\"><</a> deepEqual <a href=\"<\"><</a>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39077:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<a href=\"&lt;\"><</a> deepEqual <a href=\"<\"><</a>",
            "failingSuite": "String.prototype.link"
          },
          {
            "result": false,
            "name": "String.prototype.fontsize works on strings correctly",
            "stack": "AssertionError: <font size=\"&lt;\"><</font> deepEqual <font size=\"<\"><</font>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39248:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<font size=\"&lt;\"><</font> deepEqual <font size=\"<\"><</font>",
            "failingSuite": "String.prototype.fontsize"
          },
          {
            "result": false,
            "name": "String.prototype.fontcolor works on strings correctly",
            "stack": "AssertionError: <font color=\"&lt;\"><</font> deepEqual <font color=\"<\"><</font>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39303:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<font color=\"&lt;\"><</font> deepEqual <font color=\"<\"><</font>",
            "failingSuite": "String.prototype.fontcolor"
          },
          {
            "result": false,
            "name": "String.prototype.anchor works on strings correctly",
            "stack": "AssertionError: <a name=\"&lt;\"><</a> deepEqual <a name=\"<\"><</a>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39813:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<a name=\"&lt;\"><</a> deepEqual <a name=\"<\"><</a>",
            "failingSuite": "String.prototype.anchor"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Promise 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a directly-rejected promise `onFulfilled` is `null`",
            "stack": "TypeError: onFulfilled must be a function or undefined\n    at Context.<anonymous> (test?includePolyfills=yes:41995:14)\n    at callFnAsync (test?includePolyfills=yes:4838:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4785:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "onFulfilled must be a function or undefined",
            "failingSuite": "Promise"
          },
          {
            "result": false,
            "name": "Promise 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a directly-rejected promise `onFulfilled` is `false`",
            "stack": "TypeError: onFulfilled must be a function or undefined\n    at Context.<anonymous> (test?includePolyfills=yes:41995:14)\n    at callFnAsync (test?includePolyfills=yes:4838:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4785:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "onFulfilled must be a function or undefined",
            "failingSuite": "Promise"
          },
          {
            "result": false,
            "name": "Promise 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a directly-rejected promise `onFulfilled` is `5`",
            "stack": "TypeError: onFulfilled must be a function or undefined\n    at Context.<anonymous> (test?includePolyfills=yes:41995:14)\n    at callFnAsync (test?includePolyfills=yes:4838:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4785:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "onFulfilled must be a function or undefined",
            "failingSuite": "Promise"
          },
          {
            "result": false,
            "name": "Promise 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a directly-rejected promise `onFulfilled` is an object",
            "stack": "TypeError: onFulfilled must be a function or undefined\n    at Context.<anonymous> (test?includePolyfills=yes:41995:14)\n    at callFnAsync (test?includePolyfills=yes:4838:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4785:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "onFulfilled must be a function or undefined",
            "failingSuite": "Promise"
          },
          {
            "result": false,
            "name": "Promise 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a promise rejected and then chained off of `onFulfilled` is `null`",
            "stack": "TypeError: onFulfilled must be a function or undefined\n    at Context.<anonymous> (test?includePolyfills=yes:42019:46)\n    at callFnAsync (test?includePolyfills=yes:4838:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4785:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "onFulfilled must be a function or undefined",
            "failingSuite": "Promise"
          },
          {
            "result": false,
            "name": "Promise 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a promise rejected and then chained off of `onFulfilled` is `false`",
            "stack": "TypeError: onFulfilled must be a function or undefined\n    at Context.<anonymous> (test?includePolyfills=yes:42019:46)\n    at callFnAsync (test?includePolyfills=yes:4838:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4785:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "onFulfilled must be a function or undefined",
            "failingSuite": "Promise"
          },
          {
            "result": false,
            "name": "Promise 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a promise rejected and then chained off of `onFulfilled` is `5`",
            "stack": "TypeError: onFulfilled must be a function or undefined\n    at Context.<anonymous> (test?includePolyfills=yes:42019:46)\n    at callFnAsync (test?includePolyfills=yes:4838:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4785:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "onFulfilled must be a function or undefined",
            "failingSuite": "Promise"
          },
          {
            "result": false,
            "name": "Promise 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a promise rejected and then chained off of `onFulfilled` is an object",
            "stack": "TypeError: onFulfilled must be a function or undefined\n    at Context.<anonymous> (test?includePolyfills=yes:42019:46)\n    at callFnAsync (test?includePolyfills=yes:4838:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4785:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "onFulfilled must be a function or undefined",
            "failingSuite": "Promise"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `undefined`",
            "stack": "AssertionError: function () {\n        Object.seal(undefined);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42235:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(undefined);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `null`",
            "stack": "AssertionError: function () {\n        Object.seal(null);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42241:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(null);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `true`",
            "stack": "AssertionError: function () {\n        Object.seal(true);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42247:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(true);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `false`",
            "stack": "AssertionError: function () {\n        Object.seal(false);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42253:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(false);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a string",
            "stack": "AssertionError: function () {\n        Object.seal('a');\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42259:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal('a');\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a number",
            "stack": "AssertionError: function () {\n        Object.seal(0);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42265:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(0);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal returns the argument",
            "stack": "TypeError: Object.seal called on non-object\n    at Function.seal (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42279:33)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.seal called on non-object",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.preventExtensions does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.preventExtensions(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42320:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.preventExtensions(1);\n    } !throws undefined",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.preventExtensions returns argument if given a primitive",
            "stack": "TypeError: Object.preventExtension called on non-object\n    at Function.preventExtensions (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42338:37)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.preventExtension called on non-object",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.isSealed does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isSealed(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42514:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isSealed(1);\n    } !throws undefined",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isSealed returns true for primitives",
            "stack": "TypeError: Object.isSealed called on non-object\n    at Function.isSealed (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42532:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isSealed called on non-object",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isFrozen does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isFrozen(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42571:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isFrozen(1);\n    } !throws undefined",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isFrozen returns true for primitives",
            "stack": "TypeError: Object.isFrozen called on non-object\n    at Function.isFrozen (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42589:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isFrozen called on non-object",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isExtensible does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isExtensible(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42628:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isExtensible(1);\n    } !throws undefined",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.isExtensible returns false for primitives",
            "stack": "TypeError: Object.isExtensible called on non-object\n    at Function.isExtensible (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42646:29)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isExtensible called on non-object",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames returns an empty array for booleans and numbers",
            "stack": "TypeError: Object.getOwnPropertyNames called on non-object\n    at getOwnPropertyNames (native)\n    at getOwnPropertyNames (test?includePolyfills=yes:26964:10)\n    at Function.getOwnPropertyNames (test?includePolyfills=yes:27087:10)\n    at Context.<anonymous> (test?includePolyfills=yes:42775:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7",
            "message": "Object.getOwnPropertyNames called on non-object",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames splits a string into an array",
            "stack": "TypeError: Object.getOwnPropertyNames called on non-object\n    at getOwnPropertyNames (native)\n    at getOwnPropertyNames (test?includePolyfills=yes:26964:10)\n    at Function.getOwnPropertyNames (test?includePolyfills=yes:27087:10)\n    at Context.<anonymous> (test?includePolyfills=yes:42780:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7",
            "message": "Object.getOwnPropertyNames called on non-object",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "AssertionError: defineProp === defineProperty\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Function.proclaim.hasName (test?includePolyfills=yes:17243:13)\n    at Context.<anonymous> (test?includePolyfills=yes:43523:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "AssertionError: function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50147:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "Object.isSealed",
          "String.prototype.@@iterator",
          "Object.getOwnPropertyNames",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "String.raw",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "smoothscroll",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Object.preventExtensions",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "String.prototype.fontsize",
          "String.prototype.trim",
          "Object.isExtensible",
          "Promise",
          "String.prototype.anchor",
          "document.currentScript",
          "Array.prototype.@@iterator",
          "Object.isFrozen",
          "String.prototype.fontcolor",
          "Object.seal",
          "Map",
          "String.prototype.link",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "30.0": {
      "all": {
        "passed": 1422,
        "failed": 75,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "console.time console time()",
            "stack": "AssertionError: function () {\n\t\t\tconsole.time();\n\t\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35859:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t\tconsole.time();\n\t\t} !throws undefined",
            "failingSuite": "console.time"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "AssertionError: undefined === 1\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37575:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "AssertionError: undefined === true\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37579:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "AssertionError: undefined === null\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37583:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37591:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "AssertionError: undefined === [object Object]\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37595:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "AssertionError: undefined === /./\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37599:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "AssertionError: undefined === NaN\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37603:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "AssertionError: undefined === function (){}\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37607:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37615:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "AssertionError: function () {\n            getter.call(Symbol());\n        } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37624:18)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38173:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38186:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38213:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: shouldn't remove zero width space characters as they are not in the Zs Unicode category\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38399:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "shouldn't remove zero width space characters as they are not in the Zs Unicode category",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.link works on strings correctly",
            "stack": "AssertionError: <a href=\"&lt;\"><</a> deepEqual <a href=\"<\"><</a>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39077:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<a href=\"&lt;\"><</a> deepEqual <a href=\"<\"><</a>",
            "failingSuite": "String.prototype.link"
          },
          {
            "result": false,
            "name": "String.prototype.fontsize works on strings correctly",
            "stack": "AssertionError: <font size=\"&lt;\"><</font> deepEqual <font size=\"<\"><</font>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39248:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<font size=\"&lt;\"><</font> deepEqual <font size=\"<\"><</font>",
            "failingSuite": "String.prototype.fontsize"
          },
          {
            "result": false,
            "name": "String.prototype.fontcolor works on strings correctly",
            "stack": "AssertionError: <font color=\"&lt;\"><</font> deepEqual <font color=\"<\"><</font>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39303:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<font color=\"&lt;\"><</font> deepEqual <font color=\"<\"><</font>",
            "failingSuite": "String.prototype.fontcolor"
          },
          {
            "result": false,
            "name": "String.prototype.anchor works on strings correctly",
            "stack": "AssertionError: <a name=\"&lt;\"><</a> deepEqual <a name=\"<\"><</a>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39813:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<a name=\"&lt;\"><</a> deepEqual <a name=\"<\"><</a>",
            "failingSuite": "String.prototype.anchor"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Promise.prototype.finally is not enumerable",
            "stack": "AssertionError: true === false",
            "message": "true === false",
            "failingSuite": "Promise.prototype.finally"
          },
          {
            "result": false,
            "name": "Promise.prototype.finally onFinally no callback from resolved",
            "stack": "Error: should not be called\n    at onRejected (test?includePolyfills=yes:41569:12)\n    at X (test?includePolyfills=yes:24646:3815)\n    at Y (test?includePolyfills=yes:24646:911)\n    at test?includePolyfills=yes:24646:2974\n    at i (test?includePolyfills=yes:24646:1049)",
            "message": "should not be called",
            "failingSuite": "Promise.prototype.finally"
          },
          {
            "result": false,
            "name": "Promise.prototype.finally onFinally no callback from rejected",
            "stack": "AssertionError: TypeError: undefined is not a function === [object Object]",
            "message": "TypeError: undefined is not a function === [object Object]",
            "failingSuite": "Promise.prototype.finally"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `undefined`",
            "stack": "AssertionError: function () {\n        Object.seal(undefined);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42235:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(undefined);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `null`",
            "stack": "AssertionError: function () {\n        Object.seal(null);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42241:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(null);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `true`",
            "stack": "AssertionError: function () {\n        Object.seal(true);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42247:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(true);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `false`",
            "stack": "AssertionError: function () {\n        Object.seal(false);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42253:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(false);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a string",
            "stack": "AssertionError: function () {\n        Object.seal('a');\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42259:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal('a');\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a number",
            "stack": "AssertionError: function () {\n        Object.seal(0);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42265:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(0);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal returns the argument",
            "stack": "TypeError: Object.seal called on non-object\n    at Function.seal (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42279:33)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.seal called on non-object",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.preventExtensions does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.preventExtensions(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42320:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.preventExtensions(1);\n    } !throws undefined",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.preventExtensions returns argument if given a primitive",
            "stack": "TypeError: Object.preventExtension called on non-object\n    at Function.preventExtensions (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42338:37)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.preventExtension called on non-object",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.isSealed does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isSealed(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42514:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isSealed(1);\n    } !throws undefined",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isSealed returns true for primitives",
            "stack": "TypeError: Object.isSealed called on non-object\n    at Function.isSealed (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42532:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isSealed called on non-object",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isFrozen does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isFrozen(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42571:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isFrozen(1);\n    } !throws undefined",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isFrozen returns true for primitives",
            "stack": "TypeError: Object.isFrozen called on non-object\n    at Function.isFrozen (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42589:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isFrozen called on non-object",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isExtensible does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isExtensible(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42628:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isExtensible(1);\n    } !throws undefined",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.isExtensible returns false for primitives",
            "stack": "TypeError: Object.isExtensible called on non-object\n    at Function.isExtensible (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42646:29)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isExtensible called on non-object",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames returns an empty array for booleans and numbers",
            "stack": "TypeError: Object.getOwnPropertyNames called on non-object\n    at getOwnPropertyNames (native)\n    at getOwnPropertyNames (test?includePolyfills=yes:26964:10)\n    at Function.getOwnPropertyNames (test?includePolyfills=yes:27087:10)\n    at Context.<anonymous> (test?includePolyfills=yes:42775:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7",
            "message": "Object.getOwnPropertyNames called on non-object",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames splits a string into an array",
            "stack": "TypeError: Object.getOwnPropertyNames called on non-object\n    at getOwnPropertyNames (native)\n    at getOwnPropertyNames (test?includePolyfills=yes:26964:10)\n    at Function.getOwnPropertyNames (test?includePolyfills=yes:27087:10)\n    at Context.<anonymous> (test?includePolyfills=yes:42780:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7",
            "message": "Object.getOwnPropertyNames called on non-object",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "AssertionError: defineProp === defineProperty",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "AssertionError: function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50147:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests fetch without aborting",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "console.time",
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "Object.isSealed",
          "String.prototype.@@iterator",
          "Object.getOwnPropertyNames",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "String.raw",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "smoothscroll",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Object.preventExtensions",
          "Symbol.hasInstance",
          "Promise.prototype.finally",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "String.prototype.fontsize",
          "String.prototype.trim",
          "Object.isExtensible",
          "String.prototype.anchor",
          "document.currentScript",
          "AbortController",
          "Array.prototype.@@iterator",
          "Object.isFrozen",
          "String.prototype.fontcolor",
          "Object.seal",
          "Map",
          "String.prototype.link",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "29.0": {
      "all": {
        "passed": 1423,
        "failed": 74,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "console.time console time()",
            "stack": "AssertionError: function () {\n\t\t\tconsole.time();\n\t\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35859:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t\tconsole.time();\n\t\t} !throws undefined",
            "failingSuite": "console.time"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "AssertionError: undefined === 1\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37575:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "AssertionError: undefined === true\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37579:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "AssertionError: undefined === null\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37583:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37591:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "AssertionError: undefined === [object Object]\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37595:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "AssertionError: undefined === /./\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37599:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "AssertionError: undefined === NaN\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37603:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "AssertionError: undefined === function (){}\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37607:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37615:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "AssertionError: function () {\n            getter.call(Symbol());\n        } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37624:18)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Object function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    } has no method 'for'",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38173:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38186:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38213:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: shouldn't remove zero width space characters as they are not in the Zs Unicode category\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38399:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "shouldn't remove zero width space characters as they are not in the Zs Unicode category",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.link works on strings correctly",
            "stack": "AssertionError: <a href=\"&lt;\"><</a> deepEqual <a href=\"<\"><</a>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39077:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<a href=\"&lt;\"><</a> deepEqual <a href=\"<\"><</a>",
            "failingSuite": "String.prototype.link"
          },
          {
            "result": false,
            "name": "String.prototype.fontsize works on strings correctly",
            "stack": "AssertionError: <font size=\"&lt;\"><</font> deepEqual <font size=\"<\"><</font>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39248:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<font size=\"&lt;\"><</font> deepEqual <font size=\"<\"><</font>",
            "failingSuite": "String.prototype.fontsize"
          },
          {
            "result": false,
            "name": "String.prototype.fontcolor works on strings correctly",
            "stack": "AssertionError: <font color=\"&lt;\"><</font> deepEqual <font color=\"<\"><</font>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39303:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<font color=\"&lt;\"><</font> deepEqual <font color=\"<\"><</font>",
            "failingSuite": "String.prototype.fontcolor"
          },
          {
            "result": false,
            "name": "String.prototype.anchor works on strings correctly",
            "stack": "AssertionError: <a name=\"&lt;\"><</a> deepEqual <a name=\"<\"><</a>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39813:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<a name=\"&lt;\"><</a> deepEqual <a name=\"<\"><</a>",
            "failingSuite": "String.prototype.anchor"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Promise.prototype.finally is not enumerable",
            "stack": "AssertionError: true === false",
            "message": "true === false",
            "failingSuite": "Promise.prototype.finally"
          },
          {
            "result": false,
            "name": "Promise.prototype.finally onFinally no callback from resolved",
            "stack": "Error: should not be called\n    at onRejected (test?includePolyfills=yes:41569:12)\n    at X (test?includePolyfills=yes:24646:3815)\n    at Y (test?includePolyfills=yes:24646:911)\n    at test?includePolyfills=yes:24646:2974\n    at i (test?includePolyfills=yes:24646:1049)",
            "message": "should not be called",
            "failingSuite": "Promise.prototype.finally"
          },
          {
            "result": false,
            "name": "Promise.prototype.finally onFinally no callback from rejected",
            "stack": "AssertionError: TypeError: undefined is not a function === [object Object]",
            "message": "TypeError: undefined is not a function === [object Object]",
            "failingSuite": "Promise.prototype.finally"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `undefined`",
            "stack": "AssertionError: function () {\n        Object.seal(undefined);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42235:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(undefined);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `null`",
            "stack": "AssertionError: function () {\n        Object.seal(null);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42241:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(null);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `true`",
            "stack": "AssertionError: function () {\n        Object.seal(true);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42247:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(true);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `false`",
            "stack": "AssertionError: function () {\n        Object.seal(false);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42253:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(false);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a string",
            "stack": "AssertionError: function () {\n        Object.seal('a');\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42259:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal('a');\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a number",
            "stack": "AssertionError: function () {\n        Object.seal(0);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42265:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(0);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal returns the argument",
            "stack": "TypeError: Object.seal called on non-object\n    at Function.seal (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42279:33)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.seal called on non-object",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.preventExtensions does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.preventExtensions(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42320:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.preventExtensions(1);\n    } !throws undefined",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.preventExtensions returns argument if given a primitive",
            "stack": "TypeError: Object.preventExtension called on non-object\n    at Function.preventExtensions (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42338:37)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.preventExtension called on non-object",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.isSealed does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isSealed(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42514:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isSealed(1);\n    } !throws undefined",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isSealed returns true for primitives",
            "stack": "TypeError: Object.isSealed called on non-object\n    at Function.isSealed (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42532:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isSealed called on non-object",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isFrozen does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isFrozen(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42571:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isFrozen(1);\n    } !throws undefined",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isFrozen returns true for primitives",
            "stack": "TypeError: Object.isFrozen called on non-object\n    at Function.isFrozen (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42589:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isFrozen called on non-object",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isExtensible does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isExtensible(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42628:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isExtensible(1);\n    } !throws undefined",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.isExtensible returns false for primitives",
            "stack": "TypeError: Object.isExtensible called on non-object\n    at Function.isExtensible (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42646:29)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isExtensible called on non-object",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames returns an empty array for booleans and numbers",
            "stack": "TypeError: Object.getOwnPropertyNames called on non-object\n    at getOwnPropertyNames (native)\n    at getOwnPropertyNames (test?includePolyfills=yes:26964:10)\n    at Function.getOwnPropertyNames (test?includePolyfills=yes:27087:10)\n    at Context.<anonymous> (test?includePolyfills=yes:42775:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7",
            "message": "Object.getOwnPropertyNames called on non-object",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames splits a string into an array",
            "stack": "TypeError: Object.getOwnPropertyNames called on non-object\n    at getOwnPropertyNames (native)\n    at getOwnPropertyNames (test?includePolyfills=yes:26964:10)\n    at Function.getOwnPropertyNames (test?includePolyfills=yes:27087:10)\n    at Context.<anonymous> (test?includePolyfills=yes:42780:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7",
            "message": "Object.getOwnPropertyNames called on non-object",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "AssertionError: defineProp === defineProperty",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "AssertionError: function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50147:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          }
        ],
        "failingSuites": [
          "console.time",
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "Object.isSealed",
          "String.prototype.@@iterator",
          "Object.getOwnPropertyNames",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "String.raw",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "smoothscroll",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Object.preventExtensions",
          "Symbol.hasInstance",
          "Promise.prototype.finally",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "String.prototype.fontsize",
          "String.prototype.trim",
          "Object.isExtensible",
          "String.prototype.anchor",
          "document.currentScript",
          "Array.prototype.@@iterator",
          "Object.isFrozen",
          "String.prototype.fontcolor",
          "Object.seal",
          "Map",
          "String.prototype.link",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "35.0": {
      "all": {
        "passed": 1428,
        "failed": 69,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "AssertionError: undefined === 1\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37575:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "AssertionError: undefined === true\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37579:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "AssertionError: undefined === null\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37583:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37591:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "AssertionError: undefined === [object Object]\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37595:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "AssertionError: undefined === /./\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37599:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "AssertionError: undefined === NaN\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37603:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "AssertionError: undefined === function (){}\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37607:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37615:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "AssertionError: function () {\n            getter.call(Symbol());\n        } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37624:18)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: undefined is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: undefined is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: undefined is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38173:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38186:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38213:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.link works on strings correctly",
            "stack": "AssertionError: <a href=\"&lt;\"><</a> deepEqual <a href=\"<\"><</a>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39077:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<a href=\"&lt;\"><</a> deepEqual <a href=\"<\"><</a>",
            "failingSuite": "String.prototype.link"
          },
          {
            "result": false,
            "name": "String.prototype.fontsize works on strings correctly",
            "stack": "AssertionError: <font size=\"&lt;\"><</font> deepEqual <font size=\"<\"><</font>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39248:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<font size=\"&lt;\"><</font> deepEqual <font size=\"<\"><</font>",
            "failingSuite": "String.prototype.fontsize"
          },
          {
            "result": false,
            "name": "String.prototype.fontcolor works on strings correctly",
            "stack": "AssertionError: <font color=\"&lt;\"><</font> deepEqual <font color=\"<\"><</font>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39303:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<font color=\"&lt;\"><</font> deepEqual <font color=\"<\"><</font>",
            "failingSuite": "String.prototype.fontcolor"
          },
          {
            "result": false,
            "name": "String.prototype.anchor works on strings correctly",
            "stack": "AssertionError: <a name=\"&lt;\"><</a> deepEqual <a name=\"<\"><</a>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39813:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<a name=\"&lt;\"><</a> deepEqual <a name=\"<\"><</a>",
            "failingSuite": "String.prototype.anchor"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `undefined`",
            "stack": "AssertionError: function () {\n        Object.seal(undefined);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42235:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(undefined);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `null`",
            "stack": "AssertionError: function () {\n        Object.seal(null);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42241:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(null);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `true`",
            "stack": "AssertionError: function () {\n        Object.seal(true);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42247:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(true);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `false`",
            "stack": "AssertionError: function () {\n        Object.seal(false);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42253:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(false);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a string",
            "stack": "AssertionError: function () {\n        Object.seal('a');\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42259:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal('a');\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a number",
            "stack": "AssertionError: function () {\n        Object.seal(0);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42265:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(0);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal returns the argument",
            "stack": "TypeError: Object.seal called on non-object\n    at Function.seal (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42279:33)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.seal called on non-object",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.preventExtensions does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.preventExtensions(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42320:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.preventExtensions(1);\n    } !throws undefined",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.preventExtensions returns argument if given a primitive",
            "stack": "TypeError: Object.preventExtension called on non-object\n    at Function.preventExtensions (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42338:37)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.preventExtension called on non-object",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.isSealed does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isSealed(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42514:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isSealed(1);\n    } !throws undefined",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isSealed returns true for primitives",
            "stack": "TypeError: Object.isSealed called on non-object\n    at Function.isSealed (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42532:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isSealed called on non-object",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isFrozen does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isFrozen(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42571:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isFrozen(1);\n    } !throws undefined",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isFrozen returns true for primitives",
            "stack": "TypeError: Object.isFrozen called on non-object\n    at Function.isFrozen (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42589:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isFrozen called on non-object",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isExtensible does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isExtensible(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42628:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isExtensible(1);\n    } !throws undefined",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.isExtensible returns false for primitives",
            "stack": "TypeError: Object.isExtensible called on non-object\n    at Function.isExtensible (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42646:29)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isExtensible called on non-object",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames returns an empty array for booleans and numbers",
            "stack": "TypeError: Object.getOwnPropertyNames called on non-object\n    at getOwnPropertyNames (native)\n    at getOwnPropertyNames (test?includePolyfills=yes:26964:10)\n    at Function.getOwnPropertyNames (test?includePolyfills=yes:27087:10)\n    at Context.<anonymous> (test?includePolyfills=yes:42775:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7",
            "message": "Object.getOwnPropertyNames called on non-object",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames splits a string into an array",
            "stack": "TypeError: Object.getOwnPropertyNames called on non-object\n    at getOwnPropertyNames (native)\n    at getOwnPropertyNames (test?includePolyfills=yes:26964:10)\n    at Function.getOwnPropertyNames (test?includePolyfills=yes:27087:10)\n    at Context.<anonymous> (test?includePolyfills=yes:42780:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7",
            "message": "Object.getOwnPropertyNames called on non-object",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "AssertionError: defineProp === defineProperty\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Function.proclaim.hasName (test?includePolyfills=yes:17243:13)\n    at Context.<anonymous> (test?includePolyfills=yes:43523:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:415:3)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:415:3)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "AssertionError: function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50147:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "Object.isSealed",
          "String.prototype.@@iterator",
          "Object.getOwnPropertyNames",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "String.raw",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "smoothscroll",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Object.preventExtensions",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "String.prototype.fontsize",
          "Object.isExtensible",
          "String.prototype.anchor",
          "document.currentScript",
          "Array.prototype.@@iterator",
          "Object.isFrozen",
          "String.prototype.fontcolor",
          "Object.seal",
          "Map",
          "String.prototype.link",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "36.0": {
      "all": {
        "passed": 1427,
        "failed": 70,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "AssertionError: undefined === 1\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37575:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "AssertionError: undefined === true\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37579:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "AssertionError: undefined === null\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37583:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37591:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "AssertionError: undefined === [object Object]\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37595:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "AssertionError: undefined === /./\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37599:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "AssertionError: undefined === NaN\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37603:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "AssertionError: undefined === function (){}\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37607:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37615:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "AssertionError: function () {\n            getter.call(Symbol());\n        } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37624:18)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: undefined is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: undefined is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: undefined is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38173:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38186:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38213:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.link works on strings correctly",
            "stack": "AssertionError: <a href=\"&lt;\"><</a> deepEqual <a href=\"<\"><</a>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39077:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<a href=\"&lt;\"><</a> deepEqual <a href=\"<\"><</a>",
            "failingSuite": "String.prototype.link"
          },
          {
            "result": false,
            "name": "String.prototype.fontsize works on strings correctly",
            "stack": "AssertionError: <font size=\"&lt;\"><</font> deepEqual <font size=\"<\"><</font>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39248:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<font size=\"&lt;\"><</font> deepEqual <font size=\"<\"><</font>",
            "failingSuite": "String.prototype.fontsize"
          },
          {
            "result": false,
            "name": "String.prototype.fontcolor works on strings correctly",
            "stack": "AssertionError: <font color=\"&lt;\"><</font> deepEqual <font color=\"<\"><</font>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39303:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<font color=\"&lt;\"><</font> deepEqual <font color=\"<\"><</font>",
            "failingSuite": "String.prototype.fontcolor"
          },
          {
            "result": false,
            "name": "String.prototype.anchor works on strings correctly",
            "stack": "AssertionError: <a name=\"&lt;\"><</a> deepEqual <a name=\"<\"><</a>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39813:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<a name=\"&lt;\"><</a> deepEqual <a name=\"<\"><</a>",
            "failingSuite": "String.prototype.anchor"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `undefined`",
            "stack": "AssertionError: function () {\n        Object.seal(undefined);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42235:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(undefined);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `null`",
            "stack": "AssertionError: function () {\n        Object.seal(null);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42241:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(null);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `true`",
            "stack": "AssertionError: function () {\n        Object.seal(true);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42247:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(true);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `false`",
            "stack": "AssertionError: function () {\n        Object.seal(false);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42253:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(false);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a string",
            "stack": "AssertionError: function () {\n        Object.seal('a');\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42259:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal('a');\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a number",
            "stack": "AssertionError: function () {\n        Object.seal(0);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42265:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(0);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal returns the argument",
            "stack": "TypeError: Object.seal called on non-object\n    at Function.seal (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42279:33)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.seal called on non-object",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.preventExtensions does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.preventExtensions(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42320:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.preventExtensions(1);\n    } !throws undefined",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.preventExtensions returns argument if given a primitive",
            "stack": "TypeError: Object.preventExtension called on non-object\n    at Function.preventExtensions (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42338:37)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.preventExtension called on non-object",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.isSealed does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isSealed(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42514:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isSealed(1);\n    } !throws undefined",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isSealed returns true for primitives",
            "stack": "TypeError: Object.isSealed called on non-object\n    at Function.isSealed (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42532:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isSealed called on non-object",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isFrozen does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isFrozen(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42571:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isFrozen(1);\n    } !throws undefined",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isFrozen returns true for primitives",
            "stack": "TypeError: Object.isFrozen called on non-object\n    at Function.isFrozen (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42589:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isFrozen called on non-object",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isExtensible does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isExtensible(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42628:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isExtensible(1);\n    } !throws undefined",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.isExtensible returns false for primitives",
            "stack": "TypeError: Object.isExtensible called on non-object\n    at Function.isExtensible (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42646:29)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isExtensible called on non-object",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames returns an empty array for booleans and numbers",
            "stack": "TypeError: Object.getOwnPropertyNames called on non-object\n    at getOwnPropertyNames (native)\n    at getOwnPropertyNames (test?includePolyfills=yes:26964:10)\n    at Function.getOwnPropertyNames (test?includePolyfills=yes:27087:10)\n    at Context.<anonymous> (test?includePolyfills=yes:42775:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7",
            "message": "Object.getOwnPropertyNames called on non-object",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames splits a string into an array",
            "stack": "TypeError: Object.getOwnPropertyNames called on non-object\n    at getOwnPropertyNames (native)\n    at getOwnPropertyNames (test?includePolyfills=yes:26964:10)\n    at Function.getOwnPropertyNames (test?includePolyfills=yes:27087:10)\n    at Context.<anonymous> (test?includePolyfills=yes:42780:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7",
            "message": "Object.getOwnPropertyNames called on non-object",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "AssertionError: defineProp === defineProperty",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:415:3)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:415:3)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "AssertionError: function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50147:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests fetch without aborting",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "Object.isSealed",
          "String.prototype.@@iterator",
          "Object.getOwnPropertyNames",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "String.raw",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "smoothscroll",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Object.preventExtensions",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "String.prototype.fontsize",
          "Object.isExtensible",
          "String.prototype.anchor",
          "document.currentScript",
          "AbortController",
          "Array.prototype.@@iterator",
          "Object.isFrozen",
          "String.prototype.fontcolor",
          "Object.seal",
          "Map",
          "String.prototype.link",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "34.0": {
      "all": {
        "passed": 1427,
        "failed": 70,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "AssertionError: undefined === 1\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37575:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "AssertionError: undefined === true\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37579:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "AssertionError: undefined === null\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37583:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37591:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "AssertionError: undefined === [object Object]\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37595:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "AssertionError: undefined === /./\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37599:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "AssertionError: undefined === NaN\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37603:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "AssertionError: undefined === function (){}\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37607:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37615:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "AssertionError: function () {\n            getter.call(Symbol());\n        } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37624:18)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: undefined is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: undefined is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: undefined is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38173:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38186:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38213:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: shouldn't remove zero width space characters as they are not in the Zs Unicode category\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38399:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "shouldn't remove zero width space characters as they are not in the Zs Unicode category",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.link works on strings correctly",
            "stack": "AssertionError: <a href=\"&lt;\"><</a> deepEqual <a href=\"<\"><</a>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39077:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<a href=\"&lt;\"><</a> deepEqual <a href=\"<\"><</a>",
            "failingSuite": "String.prototype.link"
          },
          {
            "result": false,
            "name": "String.prototype.fontsize works on strings correctly",
            "stack": "AssertionError: <font size=\"&lt;\"><</font> deepEqual <font size=\"<\"><</font>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39248:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<font size=\"&lt;\"><</font> deepEqual <font size=\"<\"><</font>",
            "failingSuite": "String.prototype.fontsize"
          },
          {
            "result": false,
            "name": "String.prototype.fontcolor works on strings correctly",
            "stack": "AssertionError: <font color=\"&lt;\"><</font> deepEqual <font color=\"<\"><</font>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39303:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<font color=\"&lt;\"><</font> deepEqual <font color=\"<\"><</font>",
            "failingSuite": "String.prototype.fontcolor"
          },
          {
            "result": false,
            "name": "String.prototype.anchor works on strings correctly",
            "stack": "AssertionError: <a name=\"&lt;\"><</a> deepEqual <a name=\"<\"><</a>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39813:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<a name=\"&lt;\"><</a> deepEqual <a name=\"<\"><</a>",
            "failingSuite": "String.prototype.anchor"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `undefined`",
            "stack": "AssertionError: function () {\n        Object.seal(undefined);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42235:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(undefined);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `null`",
            "stack": "AssertionError: function () {\n        Object.seal(null);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42241:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(null);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `true`",
            "stack": "AssertionError: function () {\n        Object.seal(true);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42247:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(true);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `false`",
            "stack": "AssertionError: function () {\n        Object.seal(false);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42253:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(false);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a string",
            "stack": "AssertionError: function () {\n        Object.seal('a');\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42259:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal('a');\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a number",
            "stack": "AssertionError: function () {\n        Object.seal(0);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42265:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(0);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal returns the argument",
            "stack": "TypeError: Object.seal called on non-object\n    at Function.seal (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42279:33)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.seal called on non-object",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.preventExtensions does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.preventExtensions(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42320:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.preventExtensions(1);\n    } !throws undefined",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.preventExtensions returns argument if given a primitive",
            "stack": "TypeError: Object.preventExtension called on non-object\n    at Function.preventExtensions (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42338:37)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.preventExtension called on non-object",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.isSealed does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isSealed(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42514:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isSealed(1);\n    } !throws undefined",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isSealed returns true for primitives",
            "stack": "TypeError: Object.isSealed called on non-object\n    at Function.isSealed (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42532:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isSealed called on non-object",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isFrozen does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isFrozen(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42571:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isFrozen(1);\n    } !throws undefined",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isFrozen returns true for primitives",
            "stack": "TypeError: Object.isFrozen called on non-object\n    at Function.isFrozen (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42589:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isFrozen called on non-object",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isExtensible does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isExtensible(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42628:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isExtensible(1);\n    } !throws undefined",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.isExtensible returns false for primitives",
            "stack": "TypeError: Object.isExtensible called on non-object\n    at Function.isExtensible (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42646:29)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isExtensible called on non-object",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames returns an empty array for booleans and numbers",
            "stack": "TypeError: Object.getOwnPropertyNames called on non-object\n    at getOwnPropertyNames (native)\n    at getOwnPropertyNames (test?includePolyfills=yes:26964:10)\n    at Function.getOwnPropertyNames (test?includePolyfills=yes:27087:10)\n    at Context.<anonymous> (test?includePolyfills=yes:42775:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7",
            "message": "Object.getOwnPropertyNames called on non-object",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames splits a string into an array",
            "stack": "TypeError: Object.getOwnPropertyNames called on non-object\n    at getOwnPropertyNames (native)\n    at getOwnPropertyNames (test?includePolyfills=yes:26964:10)\n    at Function.getOwnPropertyNames (test?includePolyfills=yes:27087:10)\n    at Context.<anonymous> (test?includePolyfills=yes:42780:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7",
            "message": "Object.getOwnPropertyNames called on non-object",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "AssertionError: defineProp === defineProperty\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Function.proclaim.hasName (test?includePolyfills=yes:17243:13)\n    at Context.<anonymous> (test?includePolyfills=yes:43523:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "AssertionError: function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50147:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "Object.isSealed",
          "String.prototype.@@iterator",
          "Object.getOwnPropertyNames",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "String.raw",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "smoothscroll",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Object.preventExtensions",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "String.prototype.fontsize",
          "String.prototype.trim",
          "Object.isExtensible",
          "String.prototype.anchor",
          "document.currentScript",
          "Array.prototype.@@iterator",
          "Object.isFrozen",
          "String.prototype.fontcolor",
          "Object.seal",
          "Map",
          "String.prototype.link",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "37.0": {
      "all": {
        "passed": 1428,
        "failed": 69,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "AssertionError: undefined === 1\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37575:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "AssertionError: undefined === true\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37579:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "AssertionError: undefined === null\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37583:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37591:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "AssertionError: undefined === [object Object]\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37595:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "AssertionError: undefined === /./\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37599:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "AssertionError: undefined === NaN\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37603:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "AssertionError: undefined === function (){}\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37607:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37615:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "AssertionError: function () {\n            getter.call(Symbol());\n        } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37624:18)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: undefined is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: undefined is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: undefined is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38173:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38186:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38213:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.link works on strings correctly",
            "stack": "AssertionError: <a href=\"&lt;\"><</a> deepEqual <a href=\"<\"><</a>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39077:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<a href=\"&lt;\"><</a> deepEqual <a href=\"<\"><</a>",
            "failingSuite": "String.prototype.link"
          },
          {
            "result": false,
            "name": "String.prototype.fontsize works on strings correctly",
            "stack": "AssertionError: <font size=\"&lt;\"><</font> deepEqual <font size=\"<\"><</font>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39248:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<font size=\"&lt;\"><</font> deepEqual <font size=\"<\"><</font>",
            "failingSuite": "String.prototype.fontsize"
          },
          {
            "result": false,
            "name": "String.prototype.fontcolor works on strings correctly",
            "stack": "AssertionError: <font color=\"&lt;\"><</font> deepEqual <font color=\"<\"><</font>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39303:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<font color=\"&lt;\"><</font> deepEqual <font color=\"<\"><</font>",
            "failingSuite": "String.prototype.fontcolor"
          },
          {
            "result": false,
            "name": "String.prototype.anchor works on strings correctly",
            "stack": "AssertionError: <a name=\"&lt;\"><</a> deepEqual <a name=\"<\"><</a>\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39813:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "<a name=\"&lt;\"><</a> deepEqual <a name=\"<\"><</a>",
            "failingSuite": "String.prototype.anchor"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `undefined`",
            "stack": "AssertionError: function () {\n        Object.seal(undefined);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42235:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(undefined);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `null`",
            "stack": "AssertionError: function () {\n        Object.seal(null);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42241:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(null);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `true`",
            "stack": "AssertionError: function () {\n        Object.seal(true);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42247:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(true);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `false`",
            "stack": "AssertionError: function () {\n        Object.seal(false);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42253:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(false);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a string",
            "stack": "AssertionError: function () {\n        Object.seal('a');\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42259:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal('a');\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a number",
            "stack": "AssertionError: function () {\n        Object.seal(0);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42265:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(0);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal returns the argument",
            "stack": "TypeError: Object.seal called on non-object\n    at Function.seal (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42279:33)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.seal called on non-object",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.preventExtensions does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.preventExtensions(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42320:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.preventExtensions(1);\n    } !throws undefined",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.preventExtensions returns argument if given a primitive",
            "stack": "TypeError: Object.preventExtension called on non-object\n    at Function.preventExtensions (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42338:37)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.preventExtension called on non-object",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.isSealed does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isSealed(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42514:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isSealed(1);\n    } !throws undefined",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isSealed returns true for primitives",
            "stack": "TypeError: Object.isSealed called on non-object\n    at Function.isSealed (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42532:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isSealed called on non-object",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isFrozen does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isFrozen(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42571:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isFrozen(1);\n    } !throws undefined",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isFrozen returns true for primitives",
            "stack": "TypeError: Object.isFrozen called on non-object\n    at Function.isFrozen (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42589:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isFrozen called on non-object",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isExtensible does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isExtensible(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42628:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isExtensible(1);\n    } !throws undefined",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.isExtensible returns false for primitives",
            "stack": "TypeError: Object.isExtensible called on non-object\n    at Function.isExtensible (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42646:29)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isExtensible called on non-object",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames returns an empty array for booleans and numbers",
            "stack": "TypeError: Object.getOwnPropertyNames called on non-object\n    at getOwnPropertyNames (native)\n    at getOwnPropertyNames (test?includePolyfills=yes:26964:10)\n    at Function.getOwnPropertyNames (test?includePolyfills=yes:27087:10)\n    at Context.<anonymous> (test?includePolyfills=yes:42775:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7",
            "message": "Object.getOwnPropertyNames called on non-object",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames splits a string into an array",
            "stack": "TypeError: Object.getOwnPropertyNames called on non-object\n    at getOwnPropertyNames (native)\n    at getOwnPropertyNames (test?includePolyfills=yes:26964:10)\n    at Function.getOwnPropertyNames (test?includePolyfills=yes:27087:10)\n    at Context.<anonymous> (test?includePolyfills=yes:42780:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7",
            "message": "Object.getOwnPropertyNames called on non-object",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "AssertionError: defineProp === defineProperty\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Function.proclaim.hasName (test?includePolyfills=yes:17243:13)\n    at Context.<anonymous> (test?includePolyfills=yes:43523:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "AssertionError: function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50147:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "Object.isSealed",
          "String.prototype.@@iterator",
          "Object.getOwnPropertyNames",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "String.raw",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "smoothscroll",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Object.preventExtensions",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "String.prototype.fontsize",
          "Object.isExtensible",
          "String.prototype.anchor",
          "document.currentScript",
          "Array.prototype.@@iterator",
          "Object.isFrozen",
          "String.prototype.fontcolor",
          "Object.seal",
          "Map",
          "String.prototype.link",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "38.0": {
      "all": {
        "passed": 1430,
        "failed": 67,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "AssertionError: undefined === 1\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37575:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "AssertionError: undefined === true\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37579:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "AssertionError: undefined === null\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37583:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37591:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "AssertionError: undefined === [object Object]\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37595:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "AssertionError: undefined === /./\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37599:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "AssertionError: undefined === NaN\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37603:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "AssertionError: undefined === function (){}\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37607:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37615:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "AssertionError: function () {\n            getter.call(Symbol());\n        } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37624:18)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: undefined is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: undefined is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: undefined is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38173:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38186:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38213:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `undefined`",
            "stack": "AssertionError: function () {\n        Object.seal(undefined);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42235:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(undefined);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `null`",
            "stack": "AssertionError: function () {\n        Object.seal(null);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42241:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(null);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `true`",
            "stack": "AssertionError: function () {\n        Object.seal(true);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42247:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(true);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `false`",
            "stack": "AssertionError: function () {\n        Object.seal(false);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42253:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(false);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a string",
            "stack": "AssertionError: function () {\n        Object.seal('a');\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42259:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal('a');\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a number",
            "stack": "AssertionError: function () {\n        Object.seal(0);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42265:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(0);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal returns the argument",
            "stack": "TypeError: Object.seal called on non-object\n    at Function.seal (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42279:33)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.seal called on non-object",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.preventExtensions does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.preventExtensions(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42320:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.preventExtensions(1);\n    } !throws undefined",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.preventExtensions returns argument if given a primitive",
            "stack": "TypeError: Object.preventExtension called on non-object\n    at Function.preventExtensions (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42338:37)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.preventExtension called on non-object",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.isSealed does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isSealed(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42514:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isSealed(1);\n    } !throws undefined",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isSealed returns true for primitives",
            "stack": "TypeError: Object.isSealed called on non-object\n    at Function.isSealed (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42532:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isSealed called on non-object",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isFrozen does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isFrozen(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42571:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isFrozen(1);\n    } !throws undefined",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isFrozen returns true for primitives",
            "stack": "TypeError: Object.isFrozen called on non-object\n    at Function.isFrozen (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42589:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isFrozen called on non-object",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isExtensible does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isExtensible(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42628:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isExtensible(1);\n    } !throws undefined",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.isExtensible returns false for primitives",
            "stack": "TypeError: Object.isExtensible called on non-object\n    at Function.isExtensible (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42646:29)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isExtensible called on non-object",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames returns an empty array for booleans and numbers",
            "stack": "TypeError: Object.getOwnPropertyNames called on non-object\n    at getOwnPropertyNames (native)\n    at getOwnPropertyNames (test?includePolyfills=yes:26964:10)\n    at Function.getOwnPropertyNames (test?includePolyfills=yes:27087:10)\n    at Context.<anonymous> (test?includePolyfills=yes:42775:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7",
            "message": "Object.getOwnPropertyNames called on non-object",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames splits a string into an array",
            "stack": "TypeError: Object.getOwnPropertyNames called on non-object\n    at getOwnPropertyNames (native)\n    at getOwnPropertyNames (test?includePolyfills=yes:26964:10)\n    at Function.getOwnPropertyNames (test?includePolyfills=yes:27087:10)\n    at Context.<anonymous> (test?includePolyfills=yes:42780:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7",
            "message": "Object.getOwnPropertyNames called on non-object",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "AssertionError: defineProp === defineProperty\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Function.proclaim.hasName (test?includePolyfills=yes:17243:13)\n    at Context.<anonymous> (test?includePolyfills=yes:43523:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Math.sinh works as expected when called with negative real numbers",
            "stack": "AssertionError: 0 === -2e-17\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44765:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "0 === -2e-17",
            "failingSuite": "Math.sinh"
          },
          {
            "result": false,
            "name": "Math.cosh works as expected when called with positive integers",
            "stack": "AssertionError: Infinity !== Infinity\n    at Function.proclaim.notStrictEqual (test?includePolyfills=yes:16987:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45352:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Infinity !== Infinity",
            "failingSuite": "Math.cosh"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "AssertionError: function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50147:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "Object.isSealed",
          "String.prototype.@@iterator",
          "Object.getOwnPropertyNames",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "String.raw",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "smoothscroll",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Object.preventExtensions",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "Math.sinh",
          "Math.cosh",
          "Object.isExtensible",
          "document.currentScript",
          "Array.prototype.@@iterator",
          "Object.isFrozen",
          "Object.seal",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "39.0": {
      "all": {
        "passed": 1432,
        "failed": 65,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "AssertionError: undefined === 1\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37575:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "AssertionError: undefined === true\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37579:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "AssertionError: undefined === null\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37583:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37591:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "AssertionError: undefined === [object Object]\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37595:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "AssertionError: undefined === /./\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37599:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "AssertionError: undefined === NaN\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37603:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "AssertionError: undefined === function (){}\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37607:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37615:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "AssertionError: function () {\n            getter.call(Symbol());\n        } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37624:18)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: undefined is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: undefined is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: undefined is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38173:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38186:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38213:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `undefined`",
            "stack": "AssertionError: function () {\n        Object.seal(undefined);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42235:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(undefined);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `null`",
            "stack": "AssertionError: function () {\n        Object.seal(null);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42241:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(null);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `true`",
            "stack": "AssertionError: function () {\n        Object.seal(true);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42247:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(true);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `false`",
            "stack": "AssertionError: function () {\n        Object.seal(false);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42253:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(false);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a string",
            "stack": "AssertionError: function () {\n        Object.seal('a');\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42259:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal('a');\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a number",
            "stack": "AssertionError: function () {\n        Object.seal(0);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42265:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(0);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal returns the argument",
            "stack": "TypeError: Object.seal called on non-object\n    at Function.seal (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42279:33)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.seal called on non-object",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.preventExtensions does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.preventExtensions(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42320:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.preventExtensions(1);\n    } !throws undefined",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.preventExtensions returns argument if given a primitive",
            "stack": "TypeError: Object.preventExtension called on non-object\n    at Function.preventExtensions (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42338:37)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.preventExtension called on non-object",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.isSealed does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isSealed(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42514:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isSealed(1);\n    } !throws undefined",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isSealed returns true for primitives",
            "stack": "TypeError: Object.isSealed called on non-object\n    at Function.isSealed (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42532:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isSealed called on non-object",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isFrozen does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isFrozen(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42571:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isFrozen(1);\n    } !throws undefined",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isFrozen returns true for primitives",
            "stack": "TypeError: Object.isFrozen called on non-object\n    at Function.isFrozen (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42589:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isFrozen called on non-object",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isExtensible does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isExtensible(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42628:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isExtensible(1);\n    } !throws undefined",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.isExtensible returns false for primitives",
            "stack": "TypeError: Object.isExtensible called on non-object\n    at Function.isExtensible (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42646:29)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isExtensible called on non-object",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames returns an empty array for booleans and numbers",
            "stack": "TypeError: Object.getOwnPropertyNames called on non-object\n    at getOwnPropertyNames (native)\n    at getOwnPropertyNames (test?includePolyfills=yes:26964:10)\n    at Function.getOwnPropertyNames (test?includePolyfills=yes:27087:10)\n    at Context.<anonymous> (test?includePolyfills=yes:42775:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7",
            "message": "Object.getOwnPropertyNames called on non-object",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames splits a string into an array",
            "stack": "TypeError: Object.getOwnPropertyNames called on non-object\n    at getOwnPropertyNames (native)\n    at getOwnPropertyNames (test?includePolyfills=yes:26964:10)\n    at Function.getOwnPropertyNames (test?includePolyfills=yes:27087:10)\n    at Context.<anonymous> (test?includePolyfills=yes:42780:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7",
            "message": "Object.getOwnPropertyNames called on non-object",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "AssertionError: defineProp === defineProperty\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Function.proclaim.hasName (test?includePolyfills=yes:17243:13)\n    at Context.<anonymous> (test?includePolyfills=yes:43523:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "AssertionError: function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50147:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "Object.isSealed",
          "String.prototype.@@iterator",
          "Object.getOwnPropertyNames",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "String.raw",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "smoothscroll",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Object.preventExtensions",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "Object.isExtensible",
          "document.currentScript",
          "Array.prototype.@@iterator",
          "Object.isFrozen",
          "Object.seal",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "40.0": {
      "all": {
        "passed": 1433,
        "failed": 64,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "AssertionError: undefined === 1\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37575:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "AssertionError: undefined === true\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37579:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "AssertionError: undefined === null\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37583:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37591:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "AssertionError: undefined === [object Object]\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37595:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "AssertionError: undefined === /./\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37599:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "AssertionError: undefined === NaN\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37603:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "AssertionError: undefined === function (){}\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37607:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37615:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "AssertionError: function () {\n            getter.call(Symbol());\n        } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37624:18)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: undefined is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: undefined is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: undefined is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38173:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38186:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38213:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `undefined`",
            "stack": "AssertionError: function () {\n        Object.seal(undefined);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42235:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(undefined);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `null`",
            "stack": "AssertionError: function () {\n        Object.seal(null);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42241:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(null);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `true`",
            "stack": "AssertionError: function () {\n        Object.seal(true);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42247:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(true);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `false`",
            "stack": "AssertionError: function () {\n        Object.seal(false);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42253:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(false);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a string",
            "stack": "AssertionError: function () {\n        Object.seal('a');\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42259:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal('a');\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a number",
            "stack": "AssertionError: function () {\n        Object.seal(0);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42265:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(0);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal returns the argument",
            "stack": "TypeError: Object.seal called on non-object\n    at Function.seal (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42279:33)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.seal called on non-object",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.preventExtensions does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.preventExtensions(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42320:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.preventExtensions(1);\n    } !throws undefined",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.preventExtensions returns argument if given a primitive",
            "stack": "TypeError: Object.preventExtension called on non-object\n    at Function.preventExtensions (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42338:37)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.preventExtension called on non-object",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.isSealed does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isSealed(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42514:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isSealed(1);\n    } !throws undefined",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isSealed returns true for primitives",
            "stack": "TypeError: Object.isSealed called on non-object\n    at Function.isSealed (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42532:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isSealed called on non-object",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isFrozen does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isFrozen(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42571:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isFrozen(1);\n    } !throws undefined",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isFrozen returns true for primitives",
            "stack": "TypeError: Object.isFrozen called on non-object\n    at Function.isFrozen (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42589:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isFrozen called on non-object",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isExtensible does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isExtensible(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42628:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isExtensible(1);\n    } !throws undefined",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.isExtensible returns false for primitives",
            "stack": "TypeError: Object.isExtensible called on non-object\n    at Function.isExtensible (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42646:29)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isExtensible called on non-object",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "AssertionError: defineProp === defineProperty\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Function.proclaim.hasName (test?includePolyfills=yes:17243:13)\n    at Context.<anonymous> (test?includePolyfills=yes:43523:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "AssertionError: function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50147:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests fetch without aborting",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "Object.isSealed",
          "String.prototype.@@iterator",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "String.raw",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "smoothscroll",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Object.preventExtensions",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "Object.isExtensible",
          "document.currentScript",
          "AbortController",
          "Array.prototype.@@iterator",
          "Object.isFrozen",
          "Object.seal",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "41.0": {
      "all": {
        "passed": 1433,
        "failed": 64,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "AssertionError: undefined === 1\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37575:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "AssertionError: undefined === true\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37579:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "AssertionError: undefined === null\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37583:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37591:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "AssertionError: undefined === [object Object]\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37595:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "AssertionError: undefined === /./\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37599:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "AssertionError: undefined === NaN\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37603:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "AssertionError: undefined === function (){}\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37607:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37615:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "AssertionError: function () {\n            getter.call(Symbol());\n        } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37624:18)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: undefined is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: undefined is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: undefined is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38173:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38186:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38213:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `undefined`",
            "stack": "AssertionError: function () {\n        Object.seal(undefined);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42235:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(undefined);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `null`",
            "stack": "AssertionError: function () {\n        Object.seal(null);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42241:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(null);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `true`",
            "stack": "AssertionError: function () {\n        Object.seal(true);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42247:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(true);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `false`",
            "stack": "AssertionError: function () {\n        Object.seal(false);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42253:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(false);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a string",
            "stack": "AssertionError: function () {\n        Object.seal('a');\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42259:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal('a');\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a number",
            "stack": "AssertionError: function () {\n        Object.seal(0);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42265:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(0);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal returns the argument",
            "stack": "TypeError: Object.seal called on non-object\n    at Function.seal (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42279:33)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.seal called on non-object",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.preventExtensions does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.preventExtensions(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42320:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.preventExtensions(1);\n    } !throws undefined",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.preventExtensions returns argument if given a primitive",
            "stack": "TypeError: Object.preventExtension called on non-object\n    at Function.preventExtensions (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42338:37)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.preventExtension called on non-object",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.isSealed does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isSealed(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42514:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isSealed(1);\n    } !throws undefined",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isSealed returns true for primitives",
            "stack": "TypeError: Object.isSealed called on non-object\n    at Function.isSealed (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42532:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isSealed called on non-object",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isFrozen does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isFrozen(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42571:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isFrozen(1);\n    } !throws undefined",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isFrozen returns true for primitives",
            "stack": "TypeError: Object.isFrozen called on non-object\n    at Function.isFrozen (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42589:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isFrozen called on non-object",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isExtensible does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isExtensible(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42628:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isExtensible(1);\n    } !throws undefined",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.isExtensible returns false for primitives",
            "stack": "TypeError: Object.isExtensible called on non-object\n    at Function.isExtensible (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42646:29)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isExtensible called on non-object",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "AssertionError: defineProp === defineProperty\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Function.proclaim.hasName (test?includePolyfills=yes:17243:13)\n    at Context.<anonymous> (test?includePolyfills=yes:43523:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "AssertionError: function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50147:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests fetch without aborting",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "Object.isSealed",
          "String.prototype.@@iterator",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "String.raw",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "smoothscroll",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Object.preventExtensions",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "Object.isExtensible",
          "document.currentScript",
          "AbortController",
          "Array.prototype.@@iterator",
          "Object.isFrozen",
          "Object.seal",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "45.0": {
      "all": {
        "passed": 1447,
        "failed": 56,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "AssertionError: undefined === 1\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37575:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "AssertionError: undefined === true\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37579:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "AssertionError: undefined === null\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37583:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37591:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "AssertionError: undefined === [object Object]\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37595:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "AssertionError: undefined === /./\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37599:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "AssertionError: undefined === NaN\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37603:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "AssertionError: undefined === function (){}\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37607:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37615:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "AssertionError: function () {\n            getter.call(Symbol());\n        } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37624:18)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38173:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38186:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38213:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "AssertionError: defineProp === defineProperty\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Function.proclaim.hasName (test?includePolyfills=yes:17243:13)\n    at Context.<anonymous> (test?includePolyfills=yes:43523:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "AssertionError: function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50147:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "AssertionError: undefined == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51290:22)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "String.raw",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "smoothscroll",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "Array.from",
          "document.currentScript",
          "AbortController",
          "Array.prototype.@@iterator",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "42.0": {
      "all": {
        "passed": 1430,
        "failed": 67,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "AssertionError: undefined === 1\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37575:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "AssertionError: undefined === true\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37579:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "AssertionError: undefined === null\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37583:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37591:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "AssertionError: undefined === [object Object]\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37595:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "AssertionError: undefined === /./\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37599:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "AssertionError: undefined === NaN\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37603:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "AssertionError: undefined === function (){}\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37607:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37615:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "AssertionError: function () {\n            getter.call(Symbol());\n        } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37624:18)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38173:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38186:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38213:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `undefined`",
            "stack": "AssertionError: function () {\n        Object.seal(undefined);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42235:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(undefined);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `null`",
            "stack": "AssertionError: function () {\n        Object.seal(null);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42241:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(null);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `true`",
            "stack": "AssertionError: function () {\n        Object.seal(true);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42247:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(true);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `false`",
            "stack": "AssertionError: function () {\n        Object.seal(false);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42253:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(false);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a string",
            "stack": "AssertionError: function () {\n        Object.seal('a');\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42259:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal('a');\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a number",
            "stack": "AssertionError: function () {\n        Object.seal(0);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42265:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(0);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal returns the argument",
            "stack": "TypeError: Object.seal called on non-object\n    at Function.seal (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42279:33)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.seal called on non-object",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.preventExtensions does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.preventExtensions(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42320:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.preventExtensions(1);\n    } !throws undefined",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.preventExtensions returns argument if given a primitive",
            "stack": "TypeError: Object.preventExtension called on non-object\n    at Function.preventExtensions (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42338:37)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.preventExtension called on non-object",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.isSealed does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isSealed(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42514:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isSealed(1);\n    } !throws undefined",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isSealed returns true for primitives",
            "stack": "TypeError: Object.isSealed called on non-object\n    at Function.isSealed (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42532:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isSealed called on non-object",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isFrozen does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isFrozen(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42571:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isFrozen(1);\n    } !throws undefined",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isFrozen returns true for primitives",
            "stack": "TypeError: Object.isFrozen called on non-object\n    at Function.isFrozen (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42589:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isFrozen called on non-object",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isExtensible does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isExtensible(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42628:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isExtensible(1);\n    } !throws undefined",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.isExtensible returns false for primitives",
            "stack": "TypeError: Object.isExtensible called on non-object\n    at Function.isExtensible (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42646:29)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isExtensible called on non-object",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "AssertionError: defineProp === defineProperty\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Function.proclaim.hasName (test?includePolyfills=yes:17243:13)\n    at Context.<anonymous> (test?includePolyfills=yes:43523:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "AssertionError: function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50147:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "AssertionError: undefined == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51290:22)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "Object.isSealed",
          "String.prototype.@@iterator",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "String.raw",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "smoothscroll",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Object.preventExtensions",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "Object.isExtensible",
          "document.currentScript",
          "AbortController",
          "Array.prototype.@@iterator",
          "Object.isFrozen",
          "Object.seal",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "44.0": {
      "all": {
        "passed": 1451,
        "failed": 52,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "AssertionError: undefined === 1\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37575:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "AssertionError: undefined === true\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37579:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "AssertionError: undefined === null\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37583:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37591:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "AssertionError: undefined === [object Object]\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37595:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "AssertionError: undefined === /./\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37599:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "AssertionError: undefined === NaN\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37603:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "AssertionError: undefined === function (){}\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37607:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37615:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "AssertionError: function () {\n            getter.call(Symbol());\n        } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37624:18)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38173:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38186:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38213:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "AssertionError: defineProp === defineProperty\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Function.proclaim.hasName (test?includePolyfills=yes:17243:13)\n    at Context.<anonymous> (test?includePolyfills=yes:43523:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "AssertionError: function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50147:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "AssertionError: undefined == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51290:22)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "String.raw",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "smoothscroll",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "document.currentScript",
          "AbortController",
          "Array.prototype.@@iterator",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "43.0": {
      "all": {
        "passed": 1430,
        "failed": 67,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "AssertionError: undefined === 1\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37575:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "AssertionError: undefined === true\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37579:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "AssertionError: undefined === null\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37583:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37591:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "AssertionError: undefined === [object Object]\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37595:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "AssertionError: undefined === /./\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37599:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "AssertionError: undefined === NaN\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37603:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "AssertionError: undefined === function (){}\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37607:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37615:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "AssertionError: function () {\n            getter.call(Symbol());\n        } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37624:18)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38173:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38186:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38213:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `undefined`",
            "stack": "AssertionError: function () {\n        Object.seal(undefined);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42235:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(undefined);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `null`",
            "stack": "AssertionError: function () {\n        Object.seal(null);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42241:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(null);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `true`",
            "stack": "AssertionError: function () {\n        Object.seal(true);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42247:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(true);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `false`",
            "stack": "AssertionError: function () {\n        Object.seal(false);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42253:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(false);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a string",
            "stack": "AssertionError: function () {\n        Object.seal('a');\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42259:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal('a');\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a number",
            "stack": "AssertionError: function () {\n        Object.seal(0);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42265:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.seal(0);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal returns the argument",
            "stack": "TypeError: Object.seal called on non-object\n    at Function.seal (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42279:33)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.seal called on non-object",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.preventExtensions does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.preventExtensions(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42320:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.preventExtensions(1);\n    } !throws undefined",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.preventExtensions returns argument if given a primitive",
            "stack": "TypeError: Object.preventExtension called on non-object\n    at Function.preventExtensions (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42338:37)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.preventExtension called on non-object",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.isSealed does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isSealed(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42514:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isSealed(1);\n    } !throws undefined",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isSealed returns true for primitives",
            "stack": "TypeError: Object.isSealed called on non-object\n    at Function.isSealed (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42532:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isSealed called on non-object",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isFrozen does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isFrozen(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42571:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isFrozen(1);\n    } !throws undefined",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isFrozen returns true for primitives",
            "stack": "TypeError: Object.isFrozen called on non-object\n    at Function.isFrozen (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42589:28)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isFrozen called on non-object",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isExtensible does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isExtensible(1);\n    } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:42628:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n        Object.isExtensible(1);\n    } !throws undefined",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.isExtensible returns false for primitives",
            "stack": "TypeError: Object.isExtensible called on non-object\n    at Function.isExtensible (native)\n    at Context.<anonymous> (test?includePolyfills=yes:42646:29)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "Object.isExtensible called on non-object",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "AssertionError: defineProp === defineProperty\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Function.proclaim.hasName (test?includePolyfills=yes:17243:13)\n    at Context.<anonymous> (test?includePolyfills=yes:43523:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "AssertionError: function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50147:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "AssertionError: undefined == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51290:22)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "Object.isSealed",
          "String.prototype.@@iterator",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "String.raw",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "smoothscroll",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Object.preventExtensions",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "Object.isExtensible",
          "document.currentScript",
          "AbortController",
          "Array.prototype.@@iterator",
          "Object.isFrozen",
          "Object.seal",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "47.0": {
      "all": {
        "passed": 1447,
        "failed": 56,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "AssertionError: undefined === 1\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37575:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "AssertionError: undefined === true\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37579:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "AssertionError: undefined === null\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37583:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37591:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "AssertionError: undefined === [object Object]\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37595:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "AssertionError: undefined === /./\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37599:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "AssertionError: undefined === NaN\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37603:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "AssertionError: undefined === function (){}\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37607:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37615:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "AssertionError: function () {\n            getter.call(Symbol());\n        } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37624:18)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38173:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38186:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38213:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "AssertionError: defineProp === defineProperty\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Function.proclaim.hasName (test?includePolyfills=yes:17243:13)\n    at Context.<anonymous> (test?includePolyfills=yes:43523:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "AssertionError: function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50147:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "AssertionError: undefined == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51290:22)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "String.raw",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "smoothscroll",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "Array.from",
          "document.currentScript",
          "AbortController",
          "Array.prototype.@@iterator",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "48.0": {
      "all": {
        "passed": 1447,
        "failed": 56,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "AssertionError: undefined === 1\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37575:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "AssertionError: undefined === true\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37579:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "AssertionError: undefined === null\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37583:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37591:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "AssertionError: undefined === [object Object]\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37595:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "AssertionError: undefined === /./\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37599:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "AssertionError: undefined === NaN\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37603:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "AssertionError: undefined === function (){}\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37607:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37615:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "AssertionError: function () {\n            getter.call(Symbol());\n        } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37624:18)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38173:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38186:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38213:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "AssertionError: defineProp === defineProperty\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Function.proclaim.hasName (test?includePolyfills=yes:17243:13)\n    at Context.<anonymous> (test?includePolyfills=yes:43523:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "AssertionError: function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50147:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "AssertionError: undefined == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51290:22)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "String.raw",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "smoothscroll",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "Array.from",
          "document.currentScript",
          "AbortController",
          "Array.prototype.@@iterator",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "46.0": {
      "all": {
        "passed": 1447,
        "failed": 56,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "AssertionError: undefined === 1\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37575:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "AssertionError: undefined === true\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37579:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "AssertionError: undefined === null\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37583:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37591:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "AssertionError: undefined === [object Object]\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37595:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "AssertionError: undefined === /./\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37599:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "AssertionError: undefined === NaN\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37603:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "AssertionError: undefined === function (){}\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37607:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37615:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "AssertionError: function () {\n            getter.call(Symbol());\n        } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37624:18)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38173:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38186:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38213:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "AssertionError: defineProp === defineProperty\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Function.proclaim.hasName (test?includePolyfills=yes:17243:13)\n    at Context.<anonymous> (test?includePolyfills=yes:43523:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "AssertionError: function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50147:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "AssertionError: undefined == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51290:22)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "String.raw",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "smoothscroll",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "Array.from",
          "document.currentScript",
          "AbortController",
          "Array.prototype.@@iterator",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "49.0": {
      "all": {
        "passed": 1447,
        "failed": 56,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "AssertionError: undefined === 1\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37575:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "AssertionError: undefined === true\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37579:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "AssertionError: undefined === null\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37583:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37591:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "AssertionError: undefined === [object Object]\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37595:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "AssertionError: undefined === /./\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37599:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "AssertionError: undefined === NaN\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37603:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "AssertionError: undefined === function (){}\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37607:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37615:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "AssertionError: function () {\n            getter.call(Symbol());\n        } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37624:18)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38173:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38186:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38213:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "AssertionError: defineProp === defineProperty\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Function.proclaim.hasName (test?includePolyfills=yes:17243:13)\n    at Context.<anonymous> (test?includePolyfills=yes:43523:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "AssertionError: function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50147:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "AssertionError: undefined == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51290:22)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "String.raw",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "smoothscroll",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "Array.from",
          "document.currentScript",
          "AbortController",
          "Array.prototype.@@iterator",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "51.0": {
      "all": {
        "passed": 1462,
        "failed": 42,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "NodeList.prototype.forEach is Array.prototype.forEach",
            "stack": "AssertionError: function forEach() { [native code] } deepStrictEqual function forEach() { [native code] }\n    at Context.<anonymous> (test?includePolyfills=yes:44409:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "function forEach() { [native code] } deepStrictEqual function forEach() { [native code] }",
            "failingSuite": "NodeList.prototype.forEach"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "AssertionError: undefined == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51290:22)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Array.prototype.copyWithin",
          "DOMTokenList.prototype.@@iterator",
          "Set",
          "WeakMap",
          "Symbol",
          "NodeList.prototype.forEach",
          "String.prototype.@@iterator",
          "Array.from",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "AbortController",
          "Array.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "smoothscroll",
          "Array.prototype.keys",
          "Map",
          "NodeList.prototype.@@iterator"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "52.0": {
      "all": {
        "passed": 1462,
        "failed": 42,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "NodeList.prototype.forEach is Array.prototype.forEach",
            "stack": "AssertionError: function forEach() { [native code] } deepStrictEqual function forEach() { [native code] }\n    at Context.<anonymous> (test?includePolyfills=yes:44409:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "function forEach() { [native code] } deepStrictEqual function forEach() { [native code] }",
            "failingSuite": "NodeList.prototype.forEach"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "AssertionError: undefined == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51290:22)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Array.prototype.copyWithin",
          "DOMTokenList.prototype.@@iterator",
          "Set",
          "WeakMap",
          "Symbol",
          "NodeList.prototype.forEach",
          "String.prototype.@@iterator",
          "Array.from",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "AbortController",
          "Array.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "smoothscroll",
          "Array.prototype.keys",
          "Map",
          "NodeList.prototype.@@iterator"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "53.0": {
      "all": {
        "passed": 1462,
        "failed": 42,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "NodeList.prototype.forEach is Array.prototype.forEach",
            "stack": "AssertionError: function forEach() { [native code] } deepStrictEqual function forEach() { [native code] }\n    at Context.<anonymous> (test?includePolyfills=yes:44409:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "function forEach() { [native code] } deepStrictEqual function forEach() { [native code] }",
            "failingSuite": "NodeList.prototype.forEach"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "AssertionError: undefined == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51290:22)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Array.prototype.copyWithin",
          "DOMTokenList.prototype.@@iterator",
          "Set",
          "WeakMap",
          "Symbol",
          "NodeList.prototype.forEach",
          "String.prototype.@@iterator",
          "Array.from",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "AbortController",
          "Array.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "smoothscroll",
          "Array.prototype.keys",
          "Map",
          "NodeList.prototype.@@iterator"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "50.0": {
      "all": {
        "passed": 1447,
        "failed": 56,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "AssertionError: undefined === 1\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37575:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "AssertionError: undefined === true\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37579:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "AssertionError: undefined === null\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37583:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37591:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "AssertionError: undefined === [object Object]\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37595:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "AssertionError: undefined === /./\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37599:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "AssertionError: undefined === NaN\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37603:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "AssertionError: undefined === function (){}\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37607:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "AssertionError: undefined === \n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37615:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "AssertionError: function () {\n            getter.call(Symbol());\n        } !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37624:18)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38173:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38186:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38213:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() { [native code] }",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "AssertionError: defineProp === defineProperty\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Function.proclaim.hasName (test?includePolyfills=yes:17243:13)\n    at Context.<anonymous> (test?includePolyfills=yes:43523:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "AssertionError: function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50147:27)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() { [native code] }",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "AssertionError: undefined == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51290:22)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "String.raw",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "smoothscroll",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "Array.from",
          "document.currentScript",
          "AbortController",
          "Array.prototype.@@iterator",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "55.0": {
      "all": {
        "passed": 1462,
        "failed": 42,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "NodeList.prototype.forEach is Array.prototype.forEach",
            "stack": "AssertionError: function forEach() { [native code] } deepStrictEqual function forEach() { [native code] }\n    at Context.<anonymous> (test?includePolyfills=yes:44409:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "function forEach() { [native code] } deepStrictEqual function forEach() { [native code] }",
            "failingSuite": "NodeList.prototype.forEach"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "AssertionError: undefined == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51290:22)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Array.prototype.copyWithin",
          "DOMTokenList.prototype.@@iterator",
          "Set",
          "WeakMap",
          "Symbol",
          "NodeList.prototype.forEach",
          "String.prototype.@@iterator",
          "Array.from",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "AbortController",
          "Array.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "smoothscroll",
          "Array.prototype.keys",
          "Map",
          "NodeList.prototype.@@iterator"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "54.0": {
      "all": {
        "passed": 1462,
        "failed": 42,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "NodeList.prototype.forEach is Array.prototype.forEach",
            "stack": "AssertionError: function forEach() { [native code] } deepStrictEqual function forEach() { [native code] }\n    at Context.<anonymous> (test?includePolyfills=yes:44409:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "function forEach() { [native code] } deepStrictEqual function forEach() { [native code] }",
            "failingSuite": "NodeList.prototype.forEach"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "AssertionError: undefined == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51290:22)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Array.prototype.copyWithin",
          "DOMTokenList.prototype.@@iterator",
          "Set",
          "WeakMap",
          "Symbol",
          "NodeList.prototype.forEach",
          "String.prototype.@@iterator",
          "Array.from",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "AbortController",
          "Array.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "smoothscroll",
          "Array.prototype.keys",
          "Map",
          "NodeList.prototype.@@iterator"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "57.0": {
      "all": {
        "passed": 1462,
        "failed": 42,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "NodeList.prototype.forEach is Array.prototype.forEach",
            "stack": "AssertionError: function forEach() { [native code] } deepStrictEqual function forEach() { [native code] }\n    at Context.<anonymous> (test?includePolyfills=yes:44409:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "function forEach() { [native code] } deepStrictEqual function forEach() { [native code] }",
            "failingSuite": "NodeList.prototype.forEach"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "AssertionError: undefined == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51290:22)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Array.prototype.copyWithin",
          "DOMTokenList.prototype.@@iterator",
          "Set",
          "WeakMap",
          "Symbol",
          "NodeList.prototype.forEach",
          "String.prototype.@@iterator",
          "Array.from",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "AbortController",
          "Array.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "smoothscroll",
          "Array.prototype.keys",
          "Map",
          "NodeList.prototype.@@iterator"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "58.0": {
      "all": {
        "passed": 1462,
        "failed": 42,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "AssertionError: undefined == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51290:22)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests fetch without aborting",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Array.prototype.copyWithin",
          "DOMTokenList.prototype.@@iterator",
          "Set",
          "WeakMap",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.from",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "AbortController",
          "Array.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "smoothscroll",
          "Array.prototype.keys",
          "Map",
          "NodeList.prototype.@@iterator"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "59.0": {
      "all": {
        "passed": 1462,
        "failed": 42,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: removes all whitespaces\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38397:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "AssertionError: undefined == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51290:22)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Array.prototype.copyWithin",
          "DOMTokenList.prototype.@@iterator",
          "Set",
          "WeakMap",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.from",
          "String.prototype.trim",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "AbortController",
          "Array.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "smoothscroll",
          "Array.prototype.keys",
          "Map",
          "NodeList.prototype.@@iterator"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "56.0": {
      "all": {
        "passed": 1462,
        "failed": 42,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "NodeList.prototype.forEach is Array.prototype.forEach",
            "stack": "AssertionError: function forEach() { [native code] } deepStrictEqual function forEach() { [native code] }\n    at Context.<anonymous> (test?includePolyfills=yes:44409:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "function forEach() { [native code] } deepStrictEqual function forEach() { [native code] }",
            "failingSuite": "NodeList.prototype.forEach"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "AssertionError: undefined == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51290:22)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Array.prototype.copyWithin",
          "DOMTokenList.prototype.@@iterator",
          "Set",
          "WeakMap",
          "Symbol",
          "NodeList.prototype.forEach",
          "String.prototype.@@iterator",
          "Array.from",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "AbortController",
          "Array.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "smoothscroll",
          "Array.prototype.keys",
          "Map",
          "NodeList.prototype.@@iterator"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "60.0": {
      "all": {
        "passed": 1462,
        "failed": 42,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:34867:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: removes all whitespaces\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38397:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "AssertionError: undefined == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51290:22)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Array.prototype.copyWithin",
          "DOMTokenList.prototype.@@iterator",
          "Set",
          "WeakMap",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.from",
          "String.prototype.trim",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "AbortController",
          "Array.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "smoothscroll",
          "Array.prototype.keys",
          "Map",
          "NodeList.prototype.@@iterator"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "61.0": {
      "all": {
        "passed": 1463,
        "failed": 41,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: removes all whitespaces\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38397:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "AssertionError: undefined == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51290:22)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Array.prototype.copyWithin",
          "DOMTokenList.prototype.@@iterator",
          "Set",
          "WeakMap",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.from",
          "String.prototype.trim",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "AbortController",
          "Array.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.keys",
          "Map",
          "NodeList.prototype.@@iterator"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "62.0": {
      "all": {
        "passed": 1463,
        "failed": 41,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: removes all whitespaces\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38397:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "AssertionError: undefined == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51290:22)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Array.prototype.copyWithin",
          "DOMTokenList.prototype.@@iterator",
          "Set",
          "WeakMap",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.from",
          "String.prototype.trim",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "AbortController",
          "Array.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.keys",
          "Map",
          "NodeList.prototype.@@iterator"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "63.0": {
      "all": {
        "passed": 1463,
        "failed": 41,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: removes all whitespaces\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38397:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "AssertionError: undefined == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51290:22)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Array.prototype.copyWithin",
          "DOMTokenList.prototype.@@iterator",
          "Set",
          "WeakMap",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.from",
          "String.prototype.trim",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "AbortController",
          "Array.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.keys",
          "Map",
          "NodeList.prototype.@@iterator"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "64.0": {
      "all": {
        "passed": 1463,
        "failed": 41,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: removes all whitespaces\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38397:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "AssertionError: undefined == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51290:22)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Array.prototype.copyWithin",
          "DOMTokenList.prototype.@@iterator",
          "Set",
          "WeakMap",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.from",
          "String.prototype.trim",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "AbortController",
          "Array.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.keys",
          "Map",
          "NodeList.prototype.@@iterator"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "65.0": {
      "all": {
        "passed": 1463,
        "failed": 41,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: removes all whitespaces\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38397:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "AssertionError: undefined == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51290:22)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Array.prototype.copyWithin",
          "DOMTokenList.prototype.@@iterator",
          "Set",
          "WeakMap",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.from",
          "String.prototype.trim",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "AbortController",
          "Array.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.keys",
          "Map",
          "NodeList.prototype.@@iterator"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "66.0": {
      "all": {
        "passed": 1467,
        "failed": 37,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function() {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function() {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: removes all whitespaces\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38397:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Array.prototype.copyWithin",
          "DOMTokenList.prototype.@@iterator",
          "Set",
          "WeakMap",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.from",
          "String.prototype.trim",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Array.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.keys",
          "Map",
          "NodeList.prototype.@@iterator"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "69.0": {
      "all": {
        "passed": 1467,
        "failed": 37,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function() {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function() {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: removes all whitespaces\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38397:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Array.prototype.copyWithin",
          "DOMTokenList.prototype.@@iterator",
          "Set",
          "WeakMap",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.from",
          "String.prototype.trim",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Array.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.keys",
          "Map",
          "NodeList.prototype.@@iterator"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "68.0": {
      "all": {
        "passed": 1466,
        "failed": 38,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function() {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function() {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: removes all whitespaces\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38397:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests fetch without aborting",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Array.prototype.copyWithin",
          "DOMTokenList.prototype.@@iterator",
          "Set",
          "WeakMap",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.from",
          "String.prototype.trim",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "AbortController",
          "Array.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.keys",
          "Map",
          "NodeList.prototype.@@iterator"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "67.0": {
      "all": {
        "passed": 1467,
        "failed": 37,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:36613:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37686:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37708:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37720:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37742:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37795:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37817:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37829:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37851:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37863:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n    at Function.proclaim.notEqual (test?includePolyfills=yes:16972:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37885:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37898:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n    at Function.proclaim.throws (test?includePolyfills=yes:17022:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37942:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n    at Function.proclaim.equal (test?includePolyfills=yes:16963:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37946:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function Symbol() { [native code] } == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof function Function() { [native code] }\n    at Function.proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n    at Context.<anonymous> (test?includePolyfills=yes:37993:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "undefined instanceof function Function() { [native code] }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function() {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n    at Function.proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38026:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "function() {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38040:26)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38045:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Symbol.for is not a function\n    at Context.<anonymous> (test?includePolyfills=yes:38051:25)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: removes all whitespaces\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38397:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39821:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:39979:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:44414:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:44433:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:45838:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:48556:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n    at Context.<anonymous> (test?includePolyfills=yes:48574:12)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5\n    at timeslice (test?includePolyfills=yes:416:27)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:49577:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50655:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50826:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "AssertionError:  deepEqual 1,2,3,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51083:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "AssertionError:  deepEqual 2,4\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51090:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51104:14)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "AssertionError:  deepEqual 1,2,3,4,\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:51111:16)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Array.prototype.copyWithin",
          "DOMTokenList.prototype.@@iterator",
          "Set",
          "WeakMap",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.from",
          "String.prototype.trim",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Array.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.keys",
          "Map",
          "NodeList.prototype.@@iterator"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "72.0": {
      "all": {
        "passed": 1507,
        "failed": 4,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: removes all whitespaces\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38397:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          }
        ],
        "failingSuites": [
          "document.currentScript",
          "Array.prototype.copyWithin",
          "String.prototype.trim",
          "Element.prototype.toggleAttribute"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "71.0": {
      "all": {
        "passed": 1506,
        "failed": 5,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: removes all whitespaces\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38397:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests fetch without aborting",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "document.currentScript",
          "Array.prototype.copyWithin",
          "String.prototype.trim",
          "AbortController",
          "Element.prototype.toggleAttribute"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "70.0": {
      "all": {
        "passed": 1507,
        "failed": 4,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: removes all whitespaces\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38397:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          }
        ],
        "failingSuites": [
          "document.currentScript",
          "Array.prototype.copyWithin",
          "String.prototype.trim",
          "Element.prototype.toggleAttribute"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "73.0": {
      "all": {
        "passed": 1506,
        "failed": 5,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: removes all whitespaces\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38397:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests fetch without aborting",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "document.currentScript",
          "Array.prototype.copyWithin",
          "String.prototype.trim",
          "AbortController",
          "Element.prototype.toggleAttribute"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "74.0": {
      "all": {
        "passed": 1506,
        "failed": 5,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: removes all whitespaces\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38397:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests fetch without aborting",
            "stack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at test?includePolyfills=yes:4699:19",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "document.currentScript",
          "Array.prototype.copyWithin",
          "String.prototype.trim",
          "AbortController",
          "Element.prototype.toggleAttribute"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "76.0": {
      "all": {
        "passed": 1507,
        "failed": 4,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: removes all whitespaces\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38397:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          }
        ],
        "failingSuites": [
          "document.currentScript",
          "Array.prototype.copyWithin",
          "String.prototype.trim",
          "Element.prototype.toggleAttribute"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "77.0": {
      "all": {
        "passed": 1506,
        "failed": 5,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: removes all whitespaces\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38397:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "Math.hypot works as expected",
            "stack": "AssertionError: 0 !== 0\n    at Function.proclaim.notStrictEqual (test?includePolyfills=yes:16987:4)\n    at Function.proclaim.isNaN (test?includePolyfills=yes:17115:12)\n    at Context.<anonymous> (test?includePolyfills=yes:45199:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)",
            "message": "0 !== 0",
            "failingSuite": "Math.hypot"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          }
        ],
        "failingSuites": [
          "Math.hypot",
          "document.currentScript",
          "Array.prototype.copyWithin",
          "String.prototype.trim",
          "Element.prototype.toggleAttribute"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "75.0": {
      "all": {
        "passed": 1507,
        "failed": 4,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: removes all whitespaces\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38397:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          }
        ],
        "failingSuites": [
          "document.currentScript",
          "Array.prototype.copyWithin",
          "String.prototype.trim",
          "Element.prototype.toggleAttribute"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "78.0": {
      "all": {
        "passed": 1507,
        "failed": 4,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: removes all whitespaces\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38397:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          }
        ],
        "failingSuites": [
          "document.currentScript",
          "Array.prototype.copyWithin",
          "String.prototype.trim",
          "Element.prototype.toggleAttribute"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "79.0": {
      "all": {
        "passed": 1507,
        "failed": 4,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n    at Function.proclaim.include (test?includePolyfills=yes:17191:4)\n    at Context.<anonymous> (test?includePolyfills=yes:35693:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: removes all whitespaces\n    at Function.proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n    at Context.<anonymous> (test?includePolyfills=yes:38397:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n    at Function.ok (test?includePolyfills=yes:16954:4)\n    at Context.<anonymous> (test?includePolyfills=yes:47566:20)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n    at Function.proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n    at Context.<anonymous> (test?includePolyfills=yes:50798:11)\n    at callFn (test?includePolyfills=yes:4815:21)\n    at Test.Runnable.run (test?includePolyfills=yes:4807:7)\n    at Runner.runTest (test?includePolyfills=yes:5303:10)\n    at test?includePolyfills=yes:5409:12\n    at next (test?includePolyfills=yes:5221:14)\n    at test?includePolyfills=yes:5231:7\n    at next (test?includePolyfills=yes:5155:14)\n    at test?includePolyfills=yes:5199:5",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          }
        ],
        "failingSuites": [
          "document.currentScript",
          "Array.prototype.copyWithin",
          "String.prototype.trim",
          "Element.prototype.toggleAttribute"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    }
  },
  "firefox": {
    "38.0": {
      "all": {
        "passed": 1449,
        "failed": 54,
        "failingTests": [
          {
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "result": false,
            "stack": "",
            "failingSuite": "document.currentScript",
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation"
          },
          {
            "message": "undefined === WeakMap",
            "result": false,
            "stack": "",
            "failingSuite": "WeakMap",
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]"
          },
          {
            "message": "undefined === 1",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol.prototype.description",
            "name": "Symbol.prototype.description works with numbers"
          },
          {
            "message": "undefined === true",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol.prototype.description",
            "name": "Symbol.prototype.description works with booleans"
          },
          {
            "message": "undefined === null",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol.prototype.description",
            "name": "Symbol.prototype.description works with null"
          },
          {
            "message": "undefined === ",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol.prototype.description",
            "name": "Symbol.prototype.description works with arrays"
          },
          {
            "message": "undefined === [object Object]",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol.prototype.description",
            "name": "Symbol.prototype.description works with objects"
          },
          {
            "message": "undefined === /./",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol.prototype.description",
            "name": "Symbol.prototype.description works with regexes"
          },
          {
            "message": "undefined === NaN",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol.prototype.description",
            "name": "Symbol.prototype.description works with NaNs"
          },
          {
            "message": "undefined === function (){}",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol.prototype.description",
            "name": "Symbol.prototype.description works with functions"
          },
          {
            "message": "undefined === ",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol.prototype.description",
            "name": "Symbol.prototype.description works with an empty string"
          },
          {
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol.prototype.description",
            "name": "Symbol.prototype.description does not throw an error if context is a symbol"
          },
          {
            "message": "false == true",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol.match",
            "name": "Symbol.match passes the feature detect"
          },
          {
            "message": "undefined != undefined",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol.match",
            "name": "Symbol.match has the well known symbol match as static properties on Symbol"
          },
          {
            "message": "false == true",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol.iterator",
            "name": "Symbol.iterator passes the feature detect"
          },
          {
            "message": "undefined != undefined",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol.iterator",
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol"
          },
          {
            "message": "false == true",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol.isConcatSpreadable",
            "name": "Symbol.isConcatSpreadable passes the feature detect"
          },
          {
            "message": "undefined != undefined",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol.isConcatSpreadable",
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol"
          },
          {
            "message": "false == true",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol.hasInstance",
            "name": "Symbol.hasInstance passes the feature detect"
          },
          {
            "message": "undefined != undefined",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol.hasInstance",
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol"
          },
          {
            "message": "false == true",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol.asyncIterator",
            "name": "Symbol.asyncIterator passes the feature detect"
          },
          {
            "message": "undefined != undefined",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol.asyncIterator",
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol"
          },
          {
            "message": "false == true",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol",
            "name": "Symbol passes the feature detect"
          },
          {
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol",
            "name": "Symbol should throw if being used via `new`"
          },
          {
            "message": "function Symbol() {\n\"use strict\";\n\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol",
            "name": "Symbol should have Symbol as the constructor property"
          },
          {
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol",
            "name": "Symbol has for, and keyFor static methods"
          },
          {
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "result": false,
            "stack": "",
            "failingSuite": "Symbol",
            "name": "Symbol Symbol.keyFor should throw if not given a symbol"
          },
          {
            "message": "Symbol.for is not a function",
            "result": false,
            "stack": "@test?includePolyfills=yes:38040:13\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "failingSuite": "Symbol",
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry"
          },
          {
            "message": "Symbol.for is not a function",
            "result": false,
            "stack": "@test?includePolyfills=yes:38045:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "failingSuite": "Symbol",
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry"
          },
          {
            "message": "Symbol.for is not a function",
            "result": false,
            "stack": "@test?includePolyfills=yes:38051:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "failingSuite": "Symbol",
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry"
          },
          {
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "result": false,
            "stack": "",
            "failingSuite": "String.raw",
            "name": "String.raw throws a TypeError if nextKey is a Symbol"
          },
          {
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "result": false,
            "stack": "",
            "failingSuite": "String.raw",
            "name": "String.raw throws a TypeError if length is a Symbol"
          },
          {
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() {\n    [native code]\n}",
            "result": false,
            "stack": "",
            "failingSuite": "String.raw",
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution"
          },
          {
            "message": "false == true",
            "result": false,
            "stack": "",
            "failingSuite": "String.prototype.@@iterator",
            "name": "String.prototype.@@iterator passes the feature detect"
          },
          {
            "message": "false == true",
            "result": false,
            "stack": "",
            "failingSuite": "Set",
            "name": "Set passes the feature detect"
          },
          {
            "message": "length,0,1,2 deepEqual 0,1,2,length",
            "result": false,
            "stack": "",
            "failingSuite": "Object.getOwnPropertyNames",
            "name": "Object.getOwnPropertyNames splits a string into an array"
          },
          {
            "message": "defineProp === defineProperty",
            "result": false,
            "stack": "",
            "failingSuite": "Object.defineProperty",
            "name": "Object.defineProperty has correct name"
          },
          {
            "message": "value is not a non-null object",
            "result": false,
            "stack": "defineProp@test?includePolyfills=yes:27065:4\n@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:1\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "failingSuite": "Object.defineProperty",
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object"
          },
          {
            "message": "false == true",
            "result": false,
            "stack": "",
            "failingSuite": "NodeList.prototype.@@iterator",
            "name": "NodeList.prototype.@@iterator passes the feature detect"
          },
          {
            "message": "undefined  undefined",
            "result": false,
            "stack": "",
            "failingSuite": "NodeList.prototype.@@iterator",
            "name": "NodeList.prototype.@@iterator exists"
          },
          {
            "message": "false == true",
            "result": false,
            "stack": "",
            "failingSuite": "Map",
            "name": "Map passes the feature detect"
          },
          {
            "message": "false == true",
            "result": false,
            "stack": "",
            "failingSuite": "Event.focusin",
            "name": "Event.focusin passes the feature detect"
          },
          {
            "message": "false == true",
            "result": false,
            "stack": "",
            "failingSuite": "Element.prototype.toggleAttribute",
            "name": "Element.prototype.toggleAttribute passes the feature detect"
          },
          {
            "message": "false == true",
            "result": false,
            "stack": "",
            "failingSuite": "DOMTokenList.prototype.@@iterator",
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect"
          },
          {
            "message": "undefined  undefined",
            "result": false,
            "stack": "",
            "failingSuite": "DOMTokenList.prototype.@@iterator",
            "name": "DOMTokenList.prototype.@@iterator exists"
          },
          {
            "message": "false == true",
            "result": false,
            "stack": "",
            "failingSuite": "Array.prototype.keys",
            "name": "Array.prototype.keys passes the feature detect"
          },
          {
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() {\n    [native code]\n}",
            "result": false,
            "stack": "",
            "failingSuite": "Array.prototype.flat",
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol"
          },
          {
            "message": "false == true",
            "result": false,
            "stack": "",
            "failingSuite": "Array.prototype.entries",
            "name": "Array.prototype.entries passes the feature detect"
          },
          {
            "message": "1 deepEqual foo",
            "result": false,
            "stack": "",
            "failingSuite": "Array.prototype.copyWithin",
            "name": "Array.prototype.copyWithin should check inherited properties as well"
          },
          {
            "message": "false == true",
            "result": false,
            "stack": "",
            "failingSuite": "Array.prototype.@@iterator",
            "name": "Array.prototype.@@iterator passes the feature detect"
          },
          {
            "message": " deepEqual 1,2,3,4",
            "result": false,
            "stack": "",
            "failingSuite": "Array.from",
            "name": "Array.from returns an array with Iterable can convert from Map"
          },
          {
            "message": " deepEqual 2,4",
            "result": false,
            "stack": "",
            "failingSuite": "Array.from",
            "name": "Array.from returns an array with Iterable can convert from map iterator"
          },
          {
            "message": " deepEqual 1,2,3,4,",
            "result": false,
            "stack": "",
            "failingSuite": "Array.from",
            "name": "Array.from returns an array with Iterable can convert from Set"
          },
          {
            "message": " deepEqual 1,2,3,4,",
            "result": false,
            "stack": "",
            "failingSuite": "Array.from",
            "name": "Array.from returns an array with Iterable can convert from set iterator"
          }
        ],
        "failingSuites": [
          "Symbol.match",
          "Element.prototype.toggleAttribute",
          "Symbol.iterator",
          "String.prototype.@@iterator",
          "Array.prototype.flat",
          "NodeList.prototype.@@iterator",
          "Symbol.hasInstance",
          "Symbol.isConcatSpreadable",
          "document.currentScript",
          "Set",
          "Array.prototype.copyWithin",
          "String.raw",
          "Object.getOwnPropertyNames",
          "Symbol.asyncIterator",
          "Map",
          "DOMTokenList.prototype.@@iterator",
          "Symbol.prototype.description",
          "Array.prototype.entries",
          "Event.focusin",
          "Array.from",
          "WeakMap",
          "Array.prototype.keys",
          "Symbol",
          "Array.prototype.@@iterator",
          "Object.defineProperty"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "39.0": {
      "all": {
        "passed": 1445,
        "failed": 58,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "",
            "message": "function Symbol() {\n\"use strict\";\n\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "",
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38040:13\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38045:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38051:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() {\n    [native code]\n}",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames splits a string into an array",
            "stack": "",
            "message": "length,0,1,2 deepEqual 0,1,2,length",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "stack": "defineProp@test?includePolyfills=yes:27065:4\n@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:1\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "undefined is not a non-null object",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Event.focusin passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Event.focusin"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() {\n    [native code]\n}",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Set",
          "Array.prototype.copyWithin",
          "WeakMap",
          "Symbol",
          "Object.defineProperty",
          "String.prototype.@@iterator",
          "Event.focusin",
          "Object.getOwnPropertyNames",
          "Array.prototype.entries",
          "Symbol.iterator",
          "String.raw",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "NodeList.prototype.@@iterator",
          "Array.prototype.keys",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "Array.from",
          "document.currentScript",
          "Array.prototype.@@iterator",
          "AbortController",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "40.0": {
      "all": {
        "passed": 1444,
        "failed": 59,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap has valid constructor",
            "stack": "",
            "message": "function () {\n\t\tWeakMap();\n\t} throws function TypeError() {\n    [native code]\n}",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "",
            "message": "function Symbol() {\n\"use strict\";\n\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "",
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38040:13\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38045:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38051:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() {\n    [native code]\n}",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames splits a string into an array",
            "stack": "",
            "message": "length,0,1,2 deepEqual 0,1,2,length",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "stack": "defineProp@test?includePolyfills=yes:27065:4\n@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:1\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "undefined is not a non-null object",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Event.focusin passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Event.focusin"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() {\n    [native code]\n}",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Set",
          "Array.prototype.copyWithin",
          "WeakMap",
          "Symbol",
          "Object.defineProperty",
          "String.prototype.@@iterator",
          "Event.focusin",
          "Object.getOwnPropertyNames",
          "Array.prototype.entries",
          "Symbol.iterator",
          "String.raw",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "NodeList.prototype.@@iterator",
          "Array.prototype.keys",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "Array.from",
          "document.currentScript",
          "Array.prototype.@@iterator",
          "AbortController",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "43.0": {
      "all": {
        "passed": 1455,
        "failed": 49,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "",
            "message": " === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "",
            "message": "e) === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "",
            "message": "l) === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "",
            "message": "ject Obje === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "",
            "message": ") === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "",
            "message": ") === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "",
            "message": "ction (){ === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "",
            "message": "function Symbol() {\n    [native code]\n} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "",
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38040:13\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38045:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38051:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames splits a string into an array",
            "stack": "",
            "message": "length,0,1,2 deepEqual 0,1,2,length",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "stack": "@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:1\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "undefined is not a non-null object",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Set",
          "DOMTokenList.prototype.@@iterator",
          "Array.prototype.copyWithin",
          "WeakMap",
          "Symbol",
          "Object.defineProperty",
          "String.prototype.@@iterator",
          "Array.from",
          "document.currentScript",
          "Object.getOwnPropertyNames",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Array.prototype.@@iterator",
          "AbortController",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "NodeList.prototype.@@iterator",
          "Map",
          "Array.prototype.keys",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "42.0": {
      "all": {
        "passed": 1446,
        "failed": 57,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "",
            "message": "function Symbol() {\n\"use strict\";\n\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "",
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38040:13\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38045:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38051:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() {\n    [native code]\n}",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames splits a string into an array",
            "stack": "",
            "message": "length,0,1,2 deepEqual 0,1,2,length",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "stack": "defineProp@test?includePolyfills=yes:27065:4\n@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:1\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "descriptor is not a non-null object",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() {\n    [native code]\n}",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Set",
          "Array.prototype.copyWithin",
          "WeakMap",
          "Symbol",
          "Object.defineProperty",
          "String.prototype.@@iterator",
          "Object.getOwnPropertyNames",
          "Array.prototype.entries",
          "Symbol.iterator",
          "String.raw",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "NodeList.prototype.@@iterator",
          "Array.prototype.keys",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "Array.from",
          "document.currentScript",
          "Array.prototype.@@iterator",
          "AbortController",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "44.0": {
      "all": {
        "passed": 1456,
        "failed": 48,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "",
            "message": " === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "",
            "message": "e) === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "",
            "message": "l) === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "",
            "message": "ject Obje === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "",
            "message": ") === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "",
            "message": ") === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "",
            "message": "ction (){ === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "",
            "message": "function Symbol() {\n    [native code]\n} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "",
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38040:13\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38045:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38051:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "stack": "@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:1\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "undefined is not a non-null object",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Set",
          "DOMTokenList.prototype.@@iterator",
          "Array.prototype.copyWithin",
          "WeakMap",
          "Symbol",
          "Object.defineProperty",
          "String.prototype.@@iterator",
          "Array.from",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Array.prototype.@@iterator",
          "AbortController",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "NodeList.prototype.@@iterator",
          "Map",
          "Array.prototype.keys",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "41.0": {
      "all": {
        "passed": 1444,
        "failed": 59,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap has valid constructor",
            "stack": "",
            "message": "function () {\n\t\tWeakMap();\n\t} throws function TypeError() {\n    [native code]\n}",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "",
            "message": "undefined === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "",
            "message": "function () {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "",
            "message": "function Symbol() {\n\"use strict\";\n\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "",
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38040:13\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38045:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38051:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws function TypeError() {\n    [native code]\n}",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames splits a string into an array",
            "stack": "",
            "message": "length,0,1,2 deepEqual 0,1,2,length",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "",
            "message": "defineProp === defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "stack": "defineProp@test?includePolyfills=yes:27065:4\n@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:1\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "undefined is not a non-null object",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Event.focusin passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Event.focusin"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "",
            "message": "function () {\n            [].flat(Symbol());\n        } throws function TypeError() {\n    [native code]\n}",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Set",
          "Array.prototype.copyWithin",
          "WeakMap",
          "Symbol",
          "Object.defineProperty",
          "String.prototype.@@iterator",
          "Event.focusin",
          "Object.getOwnPropertyNames",
          "Array.prototype.entries",
          "Symbol.iterator",
          "String.raw",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.flat",
          "NodeList.prototype.@@iterator",
          "Array.prototype.keys",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "Array.from",
          "document.currentScript",
          "Array.prototype.@@iterator",
          "AbortController",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "45.0": {
      "all": {
        "passed": 1456,
        "failed": 48,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "",
            "message": " === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "",
            "message": "e) === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "",
            "message": "l) === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "",
            "message": "ject Obje === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "",
            "message": ") === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "",
            "message": ") === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "",
            "message": "ction (){ === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "",
            "message": "function Symbol() {\n    [native code]\n} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "",
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38040:13\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38045:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38051:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "stack": "@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:1\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:1\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:1\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "undefined is not a non-null object",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Set",
          "DOMTokenList.prototype.@@iterator",
          "Array.prototype.copyWithin",
          "WeakMap",
          "Symbol",
          "Object.defineProperty",
          "String.prototype.@@iterator",
          "Array.from",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Array.prototype.@@iterator",
          "AbortController",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "NodeList.prototype.@@iterator",
          "Map",
          "Array.prototype.keys",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "46.0": {
      "all": {
        "passed": 1455,
        "failed": 49,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "",
            "message": " === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "",
            "message": "e) === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "",
            "message": "l) === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "",
            "message": "ject Obje === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "",
            "message": ") === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "",
            "message": ") === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "",
            "message": "ction (){ === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "",
            "message": "function Symbol() {\n    [native code]\n} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "",
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38040:13\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38045:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38051:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "stack": "@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:3\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "undefined is not a non-null object",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Event.focusin passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Event.focusin"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Set",
          "DOMTokenList.prototype.@@iterator",
          "Array.prototype.copyWithin",
          "WeakMap",
          "Symbol",
          "Object.defineProperty",
          "String.prototype.@@iterator",
          "Array.from",
          "Event.focusin",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Array.prototype.@@iterator",
          "AbortController",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "NodeList.prototype.@@iterator",
          "Map",
          "Array.prototype.keys",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "47.0": {
      "all": {
        "passed": 1456,
        "failed": 48,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "",
            "message": " === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "",
            "message": "e) === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "",
            "message": "l) === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "",
            "message": "ject Obje === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "",
            "message": ") === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "",
            "message": ") === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "",
            "message": "ction (){ === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "",
            "message": "function Symbol() {\n    [native code]\n} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "",
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38040:13\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38045:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38051:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "stack": "@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:3\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "undefined is not a non-null object",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Set",
          "DOMTokenList.prototype.@@iterator",
          "Array.prototype.copyWithin",
          "WeakMap",
          "Symbol",
          "Object.defineProperty",
          "String.prototype.@@iterator",
          "Array.from",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Array.prototype.@@iterator",
          "AbortController",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "NodeList.prototype.@@iterator",
          "Map",
          "Array.prototype.keys",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "49.0": {
      "all": {
        "passed": 1453,
        "failed": 51,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "",
            "message": " === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "",
            "message": "e) === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "",
            "message": "l) === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "",
            "message": "ject Obje === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "",
            "message": ") === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "",
            "message": ") === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "",
            "message": "ction (){ === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "",
            "message": "function Symbol() {\n    [native code]\n} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "",
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38040:13\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38045:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38051:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "stack": "@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:3\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "undefined is not a non-null object",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Math.cosh works as expected when called with positive integers",
            "stack": "",
            "message": "1.543080634815244 === 1.5430806348152437",
            "failingSuite": "Math.cosh"
          },
          {
            "result": false,
            "name": "Math.cosh works as expected when called with negative integers",
            "stack": "",
            "message": "1.543080634815244 === 1.5430806348152437",
            "failingSuite": "Math.cosh"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Event.focusin passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Event.focusin"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "String.prototype.@@iterator",
          "Event.focusin",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "Array.from",
          "Math.cosh",
          "document.currentScript",
          "AbortController",
          "Array.prototype.@@iterator",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "50.0": {
      "all": {
        "passed": 1453,
        "failed": 51,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "",
            "message": " === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "",
            "message": "e) === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "",
            "message": "l) === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "",
            "message": "ject Obje === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "",
            "message": ") === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "",
            "message": ") === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "",
            "message": "ction (){ === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "",
            "message": "function Symbol() {\n    [native code]\n} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "",
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38040:13\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38045:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38051:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "stack": "@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:3\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "undefined is not a non-null object",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Math.cosh works as expected when called with positive integers",
            "stack": "",
            "message": "1.543080634815244 === 1.5430806348152437",
            "failingSuite": "Math.cosh"
          },
          {
            "result": false,
            "name": "Math.cosh works as expected when called with negative integers",
            "stack": "",
            "message": "1.543080634815244 === 1.5430806348152437",
            "failingSuite": "Math.cosh"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Event.focusin passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Event.focusin"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "String.prototype.@@iterator",
          "Event.focusin",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "Array.from",
          "Math.cosh",
          "document.currentScript",
          "AbortController",
          "Array.prototype.@@iterator",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "51.0": {
      "all": {
        "passed": 1453,
        "failed": 51,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "",
            "message": " === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "",
            "message": "e) === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "",
            "message": "l) === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "",
            "message": "ject Obje === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "",
            "message": ") === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "",
            "message": ") === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "",
            "message": "ction (){ === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "",
            "message": "function Symbol() {\n    [native code]\n} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "",
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38040:13\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38045:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38051:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "stack": "@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:3\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "undefined is not a non-null object",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Math.cosh works as expected when called with positive integers",
            "stack": "",
            "message": "1.543080634815244 === 1.5430806348152437",
            "failingSuite": "Math.cosh"
          },
          {
            "result": false,
            "name": "Math.cosh works as expected when called with negative integers",
            "stack": "",
            "message": "1.543080634815244 === 1.5430806348152437",
            "failingSuite": "Math.cosh"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Event.focusin passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Event.focusin"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "String.prototype.@@iterator",
          "Event.focusin",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "Array.from",
          "Math.cosh",
          "document.currentScript",
          "AbortController",
          "Array.prototype.@@iterator",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "52.0": {
      "all": {
        "passed": 1453,
        "failed": 51,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "",
            "message": " === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "",
            "message": "e) === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "",
            "message": "l) === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "",
            "message": "ject Obje === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "",
            "message": ") === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "",
            "message": ") === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "",
            "message": "ction (){ === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "",
            "message": "function Symbol() {\n    [native code]\n} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "",
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38040:13\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38045:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38051:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "stack": "@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:3\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "undefined is not a non-null object",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Math.cosh works as expected when called with positive integers",
            "stack": "",
            "message": "1.543080634815244 === 1.5430806348152437",
            "failingSuite": "Math.cosh"
          },
          {
            "result": false,
            "name": "Math.cosh works as expected when called with negative integers",
            "stack": "",
            "message": "1.543080634815244 === 1.5430806348152437",
            "failingSuite": "Math.cosh"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "Array.from",
          "String.prototype.trim",
          "Math.cosh",
          "document.currentScript",
          "AbortController",
          "Array.prototype.@@iterator",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "54.0": {
      "all": {
        "passed": 1453,
        "failed": 51,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "",
            "message": " === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "",
            "message": "e) === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "",
            "message": "l) === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "",
            "message": "ject Obje === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "",
            "message": ") === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "",
            "message": ") === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "",
            "message": "ction(){} === function(){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "",
            "message": "function Symbol() {\n    [native code]\n} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "",
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "",
            "message": "function() {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38040:13\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38045:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38051:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "stack": "@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:3\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "undefined is not a non-null object",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Math.cosh works as expected when called with positive integers",
            "stack": "",
            "message": "1.543080634815244 === 1.5430806348152437",
            "failingSuite": "Math.cosh"
          },
          {
            "result": false,
            "name": "Math.cosh works as expected when called with negative integers",
            "stack": "",
            "message": "1.543080634815244 === 1.5430806348152437",
            "failingSuite": "Math.cosh"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "Array.from",
          "String.prototype.trim",
          "Math.cosh",
          "document.currentScript",
          "AbortController",
          "Array.prototype.@@iterator",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "53.0": {
      "all": {
        "passed": 1453,
        "failed": 51,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "",
            "message": " === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "",
            "message": "e) === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "",
            "message": "l) === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "",
            "message": "ject Obje === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "",
            "message": ") === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "",
            "message": ") === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "",
            "message": "ction (){ === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "",
            "message": "function Symbol() {\n    [native code]\n} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "",
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38040:13\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38045:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38051:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "stack": "@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:3\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "undefined is not a non-null object",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Math.cosh works as expected when called with positive integers",
            "stack": "",
            "message": "1.543080634815244 === 1.5430806348152437",
            "failingSuite": "Math.cosh"
          },
          {
            "result": false,
            "name": "Math.cosh works as expected when called with negative integers",
            "stack": "",
            "message": "1.543080634815244 === 1.5430806348152437",
            "failingSuite": "Math.cosh"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "Array.from",
          "String.prototype.trim",
          "Math.cosh",
          "document.currentScript",
          "AbortController",
          "Array.prototype.@@iterator",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "56.0": {
      "all": {
        "passed": 1453,
        "failed": 51,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "",
            "message": " === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "",
            "message": "e) === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "",
            "message": "l) === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "",
            "message": "ject Obje === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "",
            "message": ") === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "",
            "message": ") === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "",
            "message": "ction(){} === function(){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "",
            "message": "function Symbol() {\n    [native code]\n} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "",
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "",
            "message": "function() {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38040:13\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38045:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38051:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "stack": "@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:3\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "property descriptor must be an object, got undefined",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Math.cosh works as expected when called with positive integers",
            "stack": "",
            "message": "1.543080634815244 === 1.5430806348152437",
            "failingSuite": "Math.cosh"
          },
          {
            "result": false,
            "name": "Math.cosh works as expected when called with negative integers",
            "stack": "",
            "message": "1.543080634815244 === 1.5430806348152437",
            "failingSuite": "Math.cosh"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "Array.from",
          "String.prototype.trim",
          "Math.cosh",
          "document.currentScript",
          "AbortController",
          "Array.prototype.@@iterator",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "55.0": {
      "all": {
        "passed": 1453,
        "failed": 51,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "",
            "message": " === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "",
            "message": "e) === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "",
            "message": "l) === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "",
            "message": "ject Obje === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "",
            "message": ") === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "",
            "message": ") === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "",
            "message": "ction(){} === function(){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "",
            "message": "function Symbol() {\n    [native code]\n} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "",
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "",
            "message": "function() {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38040:13\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38045:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38051:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "stack": "@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:3\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "property descriptor must be an object, got undefined",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Math.cosh works as expected when called with positive integers",
            "stack": "",
            "message": "1.543080634815244 === 1.5430806348152437",
            "failingSuite": "Math.cosh"
          },
          {
            "result": false,
            "name": "Math.cosh works as expected when called with negative integers",
            "stack": "",
            "message": "1.543080634815244 === 1.5430806348152437",
            "failingSuite": "Math.cosh"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "[33]</</Runnable.prototype.resetTimeout/this.timer<@test?includePolyfills=yes:4699:19\n",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "DOMTokenList.prototype.@@iterator",
          "Array.from",
          "String.prototype.trim",
          "Math.cosh",
          "document.currentScript",
          "AbortController",
          "Array.prototype.@@iterator",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "58.0": {
      "all": {
        "passed": 1457,
        "failed": 47,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "",
            "message": " === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "",
            "message": "e) === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "",
            "message": "l) === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "",
            "message": "ject Obje === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "",
            "message": ") === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "",
            "message": ") === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "",
            "message": "ction(){} === function(){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "",
            "message": "function Symbol() {\n    [native code]\n} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "",
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "",
            "message": "function() {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38040:13\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38045:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38051:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "stack": "@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:3\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "descriptor must be an object, got undefined",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Math.cosh works as expected when called with positive integers",
            "stack": "",
            "message": "1.543080634815244 === 1.5430806348152437",
            "failingSuite": "Math.cosh"
          },
          {
            "result": false,
            "name": "Math.cosh works as expected when called with negative integers",
            "stack": "",
            "message": "1.543080634815244 === 1.5430806348152437",
            "failingSuite": "Math.cosh"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Array.prototype.copyWithin",
          "DOMTokenList.prototype.@@iterator",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.from",
          "String.prototype.trim",
          "Math.cosh",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Array.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.keys",
          "Map",
          "NodeList.prototype.@@iterator",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "57.0": {
      "all": {
        "passed": 1457,
        "failed": 47,
        "failingTests": [
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "",
            "message": " === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "",
            "message": "e) === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "",
            "message": "l) === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "",
            "message": "ject Obje === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "",
            "message": ") === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "",
            "message": ") === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "",
            "message": "ction(){} === function(){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "",
            "message": "function Symbol() {\n    [native code]\n} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "",
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "",
            "message": "function() {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38040:13\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38045:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "@test?includePolyfills=yes:38051:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "Symbol.for is not a function",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "",
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "stack": "@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:3\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n",
            "message": "({}) is not a non-null object",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Math.cosh works as expected when called with positive integers",
            "stack": "",
            "message": "1.543080634815244 === 1.5430806348152437",
            "failingSuite": "Math.cosh"
          },
          {
            "result": false,
            "name": "Math.cosh works as expected when called with negative integers",
            "stack": "",
            "message": "1.543080634815244 === 1.5430806348152437",
            "failingSuite": "Math.cosh"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": "",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": "",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": "",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Array.prototype.copyWithin",
          "DOMTokenList.prototype.@@iterator",
          "Set",
          "WeakMap",
          "Object.defineProperty",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.from",
          "String.prototype.trim",
          "Math.cosh",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Array.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "Array.prototype.keys",
          "Map",
          "NodeList.prototype.@@iterator",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "59.0": {
      "all": {
        "passed": 1457,
        "failed": 47,
        "failingTests": [
          {
            "failingSuite": "document.currentScript",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "WeakMap",
            "message": "undefined === WeakMap",
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": " === 1",
            "name": "Symbol.prototype.description works with numbers",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "e) === true",
            "name": "Symbol.prototype.description works with booleans",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "l) === null",
            "name": "Symbol.prototype.description works with null",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "ject Obje === [object Object]",
            "name": "Symbol.prototype.description works with objects",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": ") === /./",
            "name": "Symbol.prototype.description works with regexes",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": ") === NaN",
            "name": "Symbol.prototype.description works with NaNs",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "ction(){} === function(){}",
            "name": "Symbol.prototype.description works with functions",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.match",
            "message": "false == true",
            "name": "Symbol.match passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.match",
            "message": "undefined != undefined",
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.iterator",
            "message": "false == true",
            "name": "Symbol.iterator passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.iterator",
            "message": "undefined != undefined",
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.isConcatSpreadable",
            "message": "false == true",
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.isConcatSpreadable",
            "message": "undefined != undefined",
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.hasInstance",
            "message": "false == true",
            "name": "Symbol.hasInstance passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.hasInstance",
            "message": "undefined != undefined",
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.asyncIterator",
            "message": "false == true",
            "name": "Symbol.asyncIterator passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.asyncIterator",
            "message": "undefined != undefined",
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol",
            "message": "false == true",
            "name": "Symbol passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "name": "Symbol should throw if being used via `new`",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol",
            "message": "function Symbol() {\n    [native code]\n} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "name": "Symbol should have Symbol as the constructor property",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol",
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "name": "Symbol has for, and keyFor static methods",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol",
            "message": "function() {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol",
            "message": "Symbol.for is not a function",
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "result": false,
            "stack": "@test?includePolyfills=yes:38040:13\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n"
          },
          {
            "failingSuite": "Symbol",
            "message": "Symbol.for is not a function",
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "result": false,
            "stack": "@test?includePolyfills=yes:38045:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n"
          },
          {
            "failingSuite": "Symbol",
            "message": "Symbol.for is not a function",
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "result": false,
            "stack": "@test?includePolyfills=yes:38051:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n"
          },
          {
            "failingSuite": "String.prototype.trim",
            "message": "removes all whitespaces",
            "name": "String.prototype.trim works as expected",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "String.prototype.@@iterator",
            "message": "false == true",
            "name": "String.prototype.@@iterator passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Set",
            "message": "false == true",
            "name": "Set passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Object.defineProperty",
            "message": "descriptor must be an object, got undefined",
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "result": false,
            "stack": "@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:3\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n"
          },
          {
            "failingSuite": "NodeList.prototype.@@iterator",
            "message": "false == true",
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "NodeList.prototype.@@iterator",
            "message": "undefined  undefined",
            "name": "NodeList.prototype.@@iterator exists",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Math.cosh",
            "message": "1.543080634815244 === 1.5430806348152437",
            "name": "Math.cosh works as expected when called with positive integers",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Math.cosh",
            "message": "1.543080634815244 === 1.5430806348152437",
            "name": "Math.cosh works as expected when called with negative integers",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Map",
            "message": "false == true",
            "name": "Map passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Element.prototype.toggleAttribute",
            "message": "false == true",
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "DOMTokenList.prototype.@@iterator",
            "message": "false == true",
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "DOMTokenList.prototype.@@iterator",
            "message": "undefined  undefined",
            "name": "DOMTokenList.prototype.@@iterator exists",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.keys",
            "message": "false == true",
            "name": "Array.prototype.keys passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.entries",
            "message": "false == true",
            "name": "Array.prototype.entries passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.copyWithin",
            "message": "1 deepEqual foo",
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.@@iterator",
            "message": "false == true",
            "name": "Array.prototype.@@iterator passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.from",
            "message": " deepEqual 1,2,3,4",
            "name": "Array.from returns an array with Iterable can convert from Map",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.from",
            "message": " deepEqual 2,4",
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.from",
            "message": " deepEqual 1,2,3,4,",
            "name": "Array.from returns an array with Iterable can convert from Set",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.from",
            "message": " deepEqual 1,2,3,4,",
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "result": false,
            "stack": ""
          }
        ],
        "failingSuites": [
          "Array.from",
          "Array.prototype.@@iterator",
          "Array.prototype.copyWithin",
          "Array.prototype.entries",
          "Array.prototype.keys",
          "DOMTokenList.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Map",
          "Math.cosh",
          "NodeList.prototype.@@iterator",
          "Object.defineProperty",
          "Set",
          "String.prototype.@@iterator",
          "String.prototype.trim",
          "Symbol",
          "Symbol.asyncIterator",
          "Symbol.hasInstance",
          "Symbol.isConcatSpreadable",
          "Symbol.iterator",
          "Symbol.match",
          "Symbol.prototype.description",
          "WeakMap",
          "document.currentScript"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "60.0": {
      "all": {
        "passed": 1457,
        "failed": 47,
        "failingTests": [
          {
            "failingSuite": "document.currentScript",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "WeakMap",
            "message": "undefined === WeakMap",
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": " === 1",
            "name": "Symbol.prototype.description works with numbers",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "e) === true",
            "name": "Symbol.prototype.description works with booleans",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "l) === null",
            "name": "Symbol.prototype.description works with null",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "ject Obje === [object Object]",
            "name": "Symbol.prototype.description works with objects",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": ") === /./",
            "name": "Symbol.prototype.description works with regexes",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": ") === NaN",
            "name": "Symbol.prototype.description works with NaNs",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "ction(){} === function(){}",
            "name": "Symbol.prototype.description works with functions",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.match",
            "message": "false == true",
            "name": "Symbol.match passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.match",
            "message": "undefined != undefined",
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.iterator",
            "message": "false == true",
            "name": "Symbol.iterator passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.iterator",
            "message": "undefined != undefined",
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.isConcatSpreadable",
            "message": "false == true",
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.isConcatSpreadable",
            "message": "undefined != undefined",
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.hasInstance",
            "message": "false == true",
            "name": "Symbol.hasInstance passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.hasInstance",
            "message": "undefined != undefined",
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.asyncIterator",
            "message": "false == true",
            "name": "Symbol.asyncIterator passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.asyncIterator",
            "message": "undefined != undefined",
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol",
            "message": "false == true",
            "name": "Symbol passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "name": "Symbol should throw if being used via `new`",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol",
            "message": "function Symbol() {\n    [native code]\n} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "name": "Symbol should have Symbol as the constructor property",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol",
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "name": "Symbol has for, and keyFor static methods",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol",
            "message": "function() {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol",
            "message": "Symbol.for is not a function",
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "result": false,
            "stack": "@test?includePolyfills=yes:38040:13\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n"
          },
          {
            "failingSuite": "Symbol",
            "message": "Symbol.for is not a function",
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "result": false,
            "stack": "@test?includePolyfills=yes:38045:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n"
          },
          {
            "failingSuite": "Symbol",
            "message": "Symbol.for is not a function",
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "result": false,
            "stack": "@test?includePolyfills=yes:38051:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n"
          },
          {
            "failingSuite": "String.prototype.trim",
            "message": "removes all whitespaces",
            "name": "String.prototype.trim works as expected",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "String.prototype.@@iterator",
            "message": "false == true",
            "name": "String.prototype.@@iterator passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Set",
            "message": "false == true",
            "name": "Set passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Object.defineProperty",
            "message": "descriptor must be an object, got undefined",
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "result": false,
            "stack": "@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:3\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n"
          },
          {
            "failingSuite": "NodeList.prototype.@@iterator",
            "message": "false == true",
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "NodeList.prototype.@@iterator",
            "message": "undefined  undefined",
            "name": "NodeList.prototype.@@iterator exists",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Math.cosh",
            "message": "1.543080634815244 === 1.5430806348152437",
            "name": "Math.cosh works as expected when called with positive integers",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Math.cosh",
            "message": "1.543080634815244 === 1.5430806348152437",
            "name": "Math.cosh works as expected when called with negative integers",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Map",
            "message": "false == true",
            "name": "Map passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Element.prototype.toggleAttribute",
            "message": "false == true",
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "DOMTokenList.prototype.@@iterator",
            "message": "false == true",
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "DOMTokenList.prototype.@@iterator",
            "message": "undefined  undefined",
            "name": "DOMTokenList.prototype.@@iterator exists",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.keys",
            "message": "false == true",
            "name": "Array.prototype.keys passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.entries",
            "message": "false == true",
            "name": "Array.prototype.entries passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.copyWithin",
            "message": "1 deepEqual foo",
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.@@iterator",
            "message": "false == true",
            "name": "Array.prototype.@@iterator passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.from",
            "message": " deepEqual 1,2,3,4",
            "name": "Array.from returns an array with Iterable can convert from Map",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.from",
            "message": " deepEqual 2,4",
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.from",
            "message": " deepEqual 1,2,3,4,",
            "name": "Array.from returns an array with Iterable can convert from Set",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.from",
            "message": " deepEqual 1,2,3,4,",
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "result": false,
            "stack": ""
          }
        ],
        "failingSuites": [
          "Array.from",
          "Array.prototype.@@iterator",
          "Array.prototype.copyWithin",
          "Array.prototype.entries",
          "Array.prototype.keys",
          "DOMTokenList.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Map",
          "Math.cosh",
          "NodeList.prototype.@@iterator",
          "Object.defineProperty",
          "Set",
          "String.prototype.@@iterator",
          "String.prototype.trim",
          "Symbol",
          "Symbol.asyncIterator",
          "Symbol.hasInstance",
          "Symbol.isConcatSpreadable",
          "Symbol.iterator",
          "Symbol.match",
          "Symbol.prototype.description",
          "WeakMap",
          "document.currentScript"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "61.0": {
      "all": {
        "passed": 1457,
        "failed": 47,
        "failingTests": [
          {
            "failingSuite": "document.currentScript",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "WeakMap",
            "message": "undefined === WeakMap",
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": " === 1",
            "name": "Symbol.prototype.description works with numbers",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "e) === true",
            "name": "Symbol.prototype.description works with booleans",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "l) === null",
            "name": "Symbol.prototype.description works with null",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "ject Obje === [object Object]",
            "name": "Symbol.prototype.description works with objects",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": ") === /./",
            "name": "Symbol.prototype.description works with regexes",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": ") === NaN",
            "name": "Symbol.prototype.description works with NaNs",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "ction(){} === function(){}",
            "name": "Symbol.prototype.description works with functions",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.match",
            "message": "false == true",
            "name": "Symbol.match passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.match",
            "message": "undefined != undefined",
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.iterator",
            "message": "false == true",
            "name": "Symbol.iterator passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.iterator",
            "message": "undefined != undefined",
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.isConcatSpreadable",
            "message": "false == true",
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.isConcatSpreadable",
            "message": "undefined != undefined",
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.hasInstance",
            "message": "false == true",
            "name": "Symbol.hasInstance passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.hasInstance",
            "message": "undefined != undefined",
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.asyncIterator",
            "message": "false == true",
            "name": "Symbol.asyncIterator passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.asyncIterator",
            "message": "undefined != undefined",
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol",
            "message": "false == true",
            "name": "Symbol passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "name": "Symbol should throw if being used via `new`",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol",
            "message": "function Symbol() {\n    [native code]\n} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "name": "Symbol should have Symbol as the constructor property",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol",
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "name": "Symbol has for, and keyFor static methods",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol",
            "message": "function() {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol",
            "message": "Symbol.for is not a function",
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "result": false,
            "stack": "@test?includePolyfills=yes:38040:13\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n"
          },
          {
            "failingSuite": "Symbol",
            "message": "Symbol.for is not a function",
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "result": false,
            "stack": "@test?includePolyfills=yes:38045:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n"
          },
          {
            "failingSuite": "Symbol",
            "message": "Symbol.for is not a function",
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "result": false,
            "stack": "@test?includePolyfills=yes:38051:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n"
          },
          {
            "failingSuite": "String.prototype.trim",
            "message": "removes all whitespaces",
            "name": "String.prototype.trim works as expected",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "String.prototype.@@iterator",
            "message": "false == true",
            "name": "String.prototype.@@iterator passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Set",
            "message": "false == true",
            "name": "Set passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Object.defineProperty",
            "message": "descriptor must be an object, got undefined",
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "result": false,
            "stack": "@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:3\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n"
          },
          {
            "failingSuite": "NodeList.prototype.@@iterator",
            "message": "false == true",
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "NodeList.prototype.@@iterator",
            "message": "undefined  undefined",
            "name": "NodeList.prototype.@@iterator exists",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Math.cosh",
            "message": "1.543080634815244 === 1.5430806348152437",
            "name": "Math.cosh works as expected when called with positive integers",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Math.cosh",
            "message": "1.543080634815244 === 1.5430806348152437",
            "name": "Math.cosh works as expected when called with negative integers",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Map",
            "message": "false == true",
            "name": "Map passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Element.prototype.toggleAttribute",
            "message": "false == true",
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "DOMTokenList.prototype.@@iterator",
            "message": "false == true",
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "DOMTokenList.prototype.@@iterator",
            "message": "undefined  undefined",
            "name": "DOMTokenList.prototype.@@iterator exists",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.keys",
            "message": "false == true",
            "name": "Array.prototype.keys passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.entries",
            "message": "false == true",
            "name": "Array.prototype.entries passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.copyWithin",
            "message": "1 deepEqual foo",
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.@@iterator",
            "message": "false == true",
            "name": "Array.prototype.@@iterator passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.from",
            "message": " deepEqual 1,2,3,4",
            "name": "Array.from returns an array with Iterable can convert from Map",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.from",
            "message": " deepEqual 2,4",
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.from",
            "message": " deepEqual 1,2,3,4,",
            "name": "Array.from returns an array with Iterable can convert from Set",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.from",
            "message": " deepEqual 1,2,3,4,",
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "result": false,
            "stack": ""
          }
        ],
        "failingSuites": [
          "Array.from",
          "Array.prototype.@@iterator",
          "Array.prototype.copyWithin",
          "Array.prototype.entries",
          "Array.prototype.keys",
          "DOMTokenList.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Map",
          "Math.cosh",
          "NodeList.prototype.@@iterator",
          "Object.defineProperty",
          "Set",
          "String.prototype.@@iterator",
          "String.prototype.trim",
          "Symbol",
          "Symbol.asyncIterator",
          "Symbol.hasInstance",
          "Symbol.isConcatSpreadable",
          "Symbol.iterator",
          "Symbol.match",
          "Symbol.prototype.description",
          "WeakMap",
          "document.currentScript"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "62.0": {
      "all": {
        "passed": 1457,
        "failed": 47,
        "failingTests": [
          {
            "failingSuite": "document.currentScript",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "WeakMap",
            "message": "undefined === WeakMap",
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": " === 1",
            "name": "Symbol.prototype.description works with numbers",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "e) === true",
            "name": "Symbol.prototype.description works with booleans",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "l) === null",
            "name": "Symbol.prototype.description works with null",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "ject Obje === [object Object]",
            "name": "Symbol.prototype.description works with objects",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": ") === /./",
            "name": "Symbol.prototype.description works with regexes",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": ") === NaN",
            "name": "Symbol.prototype.description works with NaNs",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "ction(){} === function(){}",
            "name": "Symbol.prototype.description works with functions",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.match",
            "message": "false == true",
            "name": "Symbol.match passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.match",
            "message": "undefined != undefined",
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.iterator",
            "message": "false == true",
            "name": "Symbol.iterator passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.iterator",
            "message": "undefined != undefined",
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.isConcatSpreadable",
            "message": "false == true",
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.isConcatSpreadable",
            "message": "undefined != undefined",
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.hasInstance",
            "message": "false == true",
            "name": "Symbol.hasInstance passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.hasInstance",
            "message": "undefined != undefined",
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.asyncIterator",
            "message": "false == true",
            "name": "Symbol.asyncIterator passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol.asyncIterator",
            "message": "undefined != undefined",
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol",
            "message": "false == true",
            "name": "Symbol passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "name": "Symbol should throw if being used via `new`",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol",
            "message": "function Symbol() {\n    [native code]\n} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "name": "Symbol should have Symbol as the constructor property",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol",
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "name": "Symbol has for, and keyFor static methods",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol",
            "message": "function() {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Symbol",
            "message": "Symbol.for is not a function",
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "result": false,
            "stack": "@test?includePolyfills=yes:38040:13\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n"
          },
          {
            "failingSuite": "Symbol",
            "message": "Symbol.for is not a function",
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "result": false,
            "stack": "@test?includePolyfills=yes:38045:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n"
          },
          {
            "failingSuite": "Symbol",
            "message": "Symbol.for is not a function",
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "result": false,
            "stack": "@test?includePolyfills=yes:38051:12\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n"
          },
          {
            "failingSuite": "String.prototype.trim",
            "message": "removes all whitespaces",
            "name": "String.prototype.trim works as expected",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "String.prototype.@@iterator",
            "message": "false == true",
            "name": "String.prototype.@@iterator passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Set",
            "message": "false == true",
            "name": "Set passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Object.defineProperty",
            "message": "descriptor must be an object, got undefined",
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "result": false,
            "stack": "@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:3\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n"
          },
          {
            "failingSuite": "NodeList.prototype.@@iterator",
            "message": "false == true",
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "NodeList.prototype.@@iterator",
            "message": "undefined  undefined",
            "name": "NodeList.prototype.@@iterator exists",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Math.cosh",
            "message": "1.543080634815244 === 1.5430806348152437",
            "name": "Math.cosh works as expected when called with positive integers",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Math.cosh",
            "message": "1.543080634815244 === 1.5430806348152437",
            "name": "Math.cosh works as expected when called with negative integers",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Map",
            "message": "false == true",
            "name": "Map passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Element.prototype.toggleAttribute",
            "message": "false == true",
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "DOMTokenList.prototype.@@iterator",
            "message": "false == true",
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "DOMTokenList.prototype.@@iterator",
            "message": "undefined  undefined",
            "name": "DOMTokenList.prototype.@@iterator exists",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.keys",
            "message": "false == true",
            "name": "Array.prototype.keys passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.entries",
            "message": "false == true",
            "name": "Array.prototype.entries passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.copyWithin",
            "message": "1 deepEqual foo",
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.@@iterator",
            "message": "false == true",
            "name": "Array.prototype.@@iterator passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.from",
            "message": " deepEqual 1,2,3,4",
            "name": "Array.from returns an array with Iterable can convert from Map",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.from",
            "message": " deepEqual 2,4",
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.from",
            "message": " deepEqual 1,2,3,4,",
            "name": "Array.from returns an array with Iterable can convert from Set",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.from",
            "message": " deepEqual 1,2,3,4,",
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "result": false,
            "stack": ""
          }
        ],
        "failingSuites": [
          "Array.from",
          "Array.prototype.@@iterator",
          "Array.prototype.copyWithin",
          "Array.prototype.entries",
          "Array.prototype.keys",
          "DOMTokenList.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Map",
          "Math.cosh",
          "NodeList.prototype.@@iterator",
          "Object.defineProperty",
          "Set",
          "String.prototype.@@iterator",
          "String.prototype.trim",
          "Symbol",
          "Symbol.asyncIterator",
          "Symbol.hasInstance",
          "Symbol.isConcatSpreadable",
          "Symbol.iterator",
          "Symbol.match",
          "Symbol.prototype.description",
          "WeakMap",
          "document.currentScript"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "63.0": {
      "all": {
        "passed": 1504,
        "failed": 7,
        "failingTests": [
          {
            "failingSuite": "document.currentScript",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "String.prototype.trim",
            "message": "removes all whitespaces",
            "name": "String.prototype.trim works as expected",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Object.defineProperty",
            "message": "descriptor must be an object, got undefined",
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "result": false,
            "stack": "@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:3\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n"
          },
          {
            "failingSuite": "Math.cosh",
            "message": "1.543080634815244 === 1.5430806348152437",
            "name": "Math.cosh works as expected when called with positive integers",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Math.cosh",
            "message": "1.543080634815244 === 1.5430806348152437",
            "name": "Math.cosh works as expected when called with negative integers",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Element.prototype.toggleAttribute",
            "message": "false == true",
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.copyWithin",
            "message": "1 deepEqual foo",
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "result": false,
            "stack": ""
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Element.prototype.toggleAttribute",
          "Math.cosh",
          "Object.defineProperty",
          "String.prototype.trim",
          "document.currentScript"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "65.0": {
      "all": {
        "passed": 1504,
        "failed": 7,
        "failingTests": [
          {
            "failingSuite": "document.currentScript",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "String.prototype.trim",
            "message": "removes all whitespaces",
            "name": "String.prototype.trim works as expected",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Object.defineProperty",
            "message": "descriptor must be an object, got undefined",
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "result": false,
            "stack": "@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:3\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n"
          },
          {
            "failingSuite": "Math.cosh",
            "message": "1.543080634815244 === 1.5430806348152437",
            "name": "Math.cosh works as expected when called with positive integers",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Math.cosh",
            "message": "1.543080634815244 === 1.5430806348152437",
            "name": "Math.cosh works as expected when called with negative integers",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Element.prototype.toggleAttribute",
            "message": "false == true",
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.copyWithin",
            "message": "1 deepEqual foo",
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "result": false,
            "stack": ""
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Element.prototype.toggleAttribute",
          "Math.cosh",
          "Object.defineProperty",
          "String.prototype.trim",
          "document.currentScript"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "67.0": {
      "all": {
        "passed": 1504,
        "failed": 7,
        "failingTests": [
          {
            "failingSuite": "document.currentScript",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "String.prototype.trim",
            "message": "removes all whitespaces",
            "name": "String.prototype.trim works as expected",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Object.defineProperty",
            "message": "descriptor must be an object, got undefined",
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "result": false,
            "stack": "@test?includePolyfills=yes:43647:11\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:12\ncallFn@test?includePolyfills=yes:4815:21\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:10\nnext/<@test?includePolyfills=yes:5409:12\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:27\n"
          },
          {
            "failingSuite": "Math.cosh",
            "message": "1.543080634815244 === 1.5430806348152437",
            "name": "Math.cosh works as expected when called with positive integers",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Math.cosh",
            "message": "1.543080634815244 === 1.5430806348152437",
            "name": "Math.cosh works as expected when called with negative integers",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Element.prototype.toggleAttribute",
            "message": "false == true",
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.copyWithin",
            "message": "1 deepEqual foo",
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "result": false,
            "stack": ""
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Element.prototype.toggleAttribute",
          "Math.cosh",
          "Object.defineProperty",
          "String.prototype.trim",
          "document.currentScript"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "66.0": {
      "all": {
        "passed": 1504,
        "failed": 7,
        "failingTests": [
          {
            "failingSuite": "document.currentScript",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "String.prototype.trim",
            "message": "removes all whitespaces",
            "name": "String.prototype.trim works as expected",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Object.defineProperty",
            "message": "descriptor must be an object, got undefined",
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "result": false,
            "stack": "@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:3\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n"
          },
          {
            "failingSuite": "Math.cosh",
            "message": "1.543080634815244 === 1.5430806348152437",
            "name": "Math.cosh works as expected when called with positive integers",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Math.cosh",
            "message": "1.543080634815244 === 1.5430806348152437",
            "name": "Math.cosh works as expected when called with negative integers",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Element.prototype.toggleAttribute",
            "message": "false == true",
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.copyWithin",
            "message": "1 deepEqual foo",
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "result": false,
            "stack": ""
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Element.prototype.toggleAttribute",
          "Math.cosh",
          "Object.defineProperty",
          "String.prototype.trim",
          "document.currentScript"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "69.0": {
      "all": {
        "passed": 1506,
        "failed": 5,
        "failingTests": [
          {
            "failingSuite": "document.currentScript",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "String.prototype.trim",
            "message": "removes all whitespaces",
            "name": "String.prototype.trim works as expected",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Object.defineProperty",
            "message": "Property descriptor must be an object, got attributes",
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "result": false,
            "stack": "@test?includePolyfills=yes:43647:11\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:12\ncallFn@test?includePolyfills=yes:4815:21\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:10\nnext/<@test?includePolyfills=yes:5409:12\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:27\n"
          },
          {
            "failingSuite": "Element.prototype.toggleAttribute",
            "message": "false == true",
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.copyWithin",
            "message": "1 deepEqual foo",
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "result": false,
            "stack": ""
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Element.prototype.toggleAttribute",
          "Object.defineProperty",
          "String.prototype.trim",
          "document.currentScript"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "70.0": {
      "all": {
        "passed": 1506,
        "failed": 5,
        "failingTests": [
          {
            "failingSuite": "document.currentScript",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "String.prototype.trim",
            "message": "removes all whitespaces",
            "name": "String.prototype.trim works as expected",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Object.defineProperty",
            "message": "Property descriptor must be an object, got attributes",
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "result": false,
            "stack": "@test?includePolyfills=yes:43647:11\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:12\ncallFn@test?includePolyfills=yes:4815:21\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:13\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:10\nnext/<@test?includePolyfills=yes:5409:12\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:11\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:9\ntimeslice@test?includePolyfills=yes:416:27\n"
          },
          {
            "failingSuite": "Element.prototype.toggleAttribute",
            "message": "false == true",
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.copyWithin",
            "message": "1 deepEqual foo",
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "result": false,
            "stack": ""
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Element.prototype.toggleAttribute",
          "Object.defineProperty",
          "String.prototype.trim",
          "document.currentScript"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "64.0": {
      "all": {
        "passed": 1504,
        "failed": 7,
        "failingTests": [
          {
            "failingSuite": "document.currentScript",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "String.prototype.trim",
            "message": "removes all whitespaces",
            "name": "String.prototype.trim works as expected",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Object.defineProperty",
            "message": "descriptor must be an object, got undefined",
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "result": false,
            "stack": "@test?includePolyfills=yes:43647:4\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:3\ncallFn@test?includePolyfills=yes:4815:18\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:5\nnext/<@test?includePolyfills=yes:5409:7\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:5\n"
          },
          {
            "failingSuite": "Math.cosh",
            "message": "1.543080634815244 === 1.5430806348152437",
            "name": "Math.cosh works as expected when called with positive integers",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Math.cosh",
            "message": "1.543080634815244 === 1.5430806348152437",
            "name": "Math.cosh works as expected when called with negative integers",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Element.prototype.toggleAttribute",
            "message": "false == true",
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.copyWithin",
            "message": "1 deepEqual foo",
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "result": false,
            "stack": ""
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Element.prototype.toggleAttribute",
          "Math.cosh",
          "Object.defineProperty",
          "String.prototype.trim",
          "document.currentScript"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "71.0": {
      "all": {
        "passed": 1506,
        "failed": 5,
        "failingTests": [
          {
            "failingSuite": "document.currentScript",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "String.prototype.trim",
            "message": "removes all whitespaces",
            "name": "String.prototype.trim works as expected",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Object.defineProperty",
            "message": "Property descriptor must be an object, got attributes",
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "result": false,
            "stack": "@test?includePolyfills=yes:43647:11\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:12\ncallFn@test?includePolyfills=yes:4815:21\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:13\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:10\nnext/<@test?includePolyfills=yes:5409:12\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:11\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:9\ntimeslice@test?includePolyfills=yes:416:27\n"
          },
          {
            "failingSuite": "Element.prototype.toggleAttribute",
            "message": "false == true",
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.copyWithin",
            "message": "1 deepEqual foo",
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "result": false,
            "stack": ""
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Element.prototype.toggleAttribute",
          "Object.defineProperty",
          "String.prototype.trim",
          "document.currentScript"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "72.0": {
      "all": {
        "passed": 1506,
        "failed": 5,
        "failingTests": [
          {
            "failingSuite": "document.currentScript",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "String.prototype.trim",
            "message": "removes all whitespaces",
            "name": "String.prototype.trim works as expected",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Object.defineProperty",
            "message": "Property descriptor must be an object, got attributes",
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "result": false,
            "stack": "@test?includePolyfills=yes:43647:11\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:12\ncallFn@test?includePolyfills=yes:4815:21\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:13\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:10\nnext/<@test?includePolyfills=yes:5409:12\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:11\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:9\ntimeslice@test?includePolyfills=yes:416:27\n"
          },
          {
            "failingSuite": "Element.prototype.toggleAttribute",
            "message": "false == true",
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.copyWithin",
            "message": "1 deepEqual foo",
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "result": false,
            "stack": ""
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Element.prototype.toggleAttribute",
          "Object.defineProperty",
          "String.prototype.trim",
          "document.currentScript"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "68.0": {
      "all": {
        "passed": 1506,
        "failed": 5,
        "failingTests": [
          {
            "failingSuite": "document.currentScript",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "String.prototype.trim",
            "message": "removes all whitespaces",
            "name": "String.prototype.trim works as expected",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Object.defineProperty",
            "message": "descriptor must be an object, got undefined",
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "result": false,
            "stack": "@test?includePolyfills=yes:43647:11\nfunctionThrows@test?includePolyfills=yes:17560:4\nproclaim.throws@test?includePolyfills=yes:17021:8\n@test?includePolyfills=yes:43646:12\ncallFn@test?includePolyfills=yes:4815:21\n[33]</</Runnable.prototype.run@test?includePolyfills=yes:4807:7\n[34]</</Runner.prototype.runTest@test?includePolyfills=yes:5303:10\nnext/<@test?includePolyfills=yes:5409:12\nnext@test?includePolyfills=yes:5221:14\nnext/<@test?includePolyfills=yes:5231:7\nnext@test?includePolyfills=yes:5155:14\n[34]</</Runner.prototype.hook/<@test?includePolyfills=yes:5199:5\ntimeslice@test?includePolyfills=yes:416:27\n"
          },
          {
            "failingSuite": "Element.prototype.toggleAttribute",
            "message": "false == true",
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "result": false,
            "stack": ""
          },
          {
            "failingSuite": "Array.prototype.copyWithin",
            "message": "1 deepEqual foo",
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "result": false,
            "stack": ""
          }
        ],
        "failingSuites": [
          "Array.prototype.copyWithin",
          "Element.prototype.toggleAttribute",
          "Object.defineProperty",
          "String.prototype.trim",
          "document.currentScript"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    }
  },
  "ie": {
    "11.0": {
      "all": {
        "passed": 75,
        "failed": 86,
        "failingTests": [
          {
            "failingSuite": "smoothscroll",
            "message": "false == true",
            "name": "smoothscroll passes the feature detect",
            "result": false,
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:34867:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "smoothscroll",
            "message": "undefined === function",
            "name": "smoothscroll scroll is defined as a function on Element.prototype",
            "result": false,
            "stack": "AssertionError: undefined === function\n   at fail (test?includePolyfills=yes:17327:3)\n   at proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n   at proclaim.isTypeOf (test?includePolyfills=yes:17046:3)\n   at Anonymous function (test?includePolyfills=yes:34884:9)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)"
          },
          {
            "failingSuite": "smoothscroll",
            "message": "undefined === function",
            "name": "smoothscroll scrollBy is defined as a function on Element.prototype",
            "result": false,
            "stack": "AssertionError: undefined === function\n   at fail (test?includePolyfills=yes:17327:3)\n   at proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n   at proclaim.isTypeOf (test?includePolyfills=yes:17046:3)\n   at Anonymous function (test?includePolyfills=yes:34895:9)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)"
          },
          {
            "failingSuite": "screen.orientation",
            "message": "false == true",
            "name": "screen.orientation passes the feature detect",
            "result": false,
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:34949:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "screen.orientation",
            "message": "undefined instanceof \nfunction Object() {\n    [native code]\n}\n",
            "name": "screen.orientation returns an object",
            "result": false,
            "stack": "AssertionError: undefined instanceof \nfunction Object() {\n    [native code]\n}\n\n   at fail (test?includePolyfills=yes:17327:3)\n   at proclaim.isInstanceOf (test?includePolyfills=yes:17057:4)\n   at Anonymous function (test?includePolyfills=yes:34959:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "screen.orientation",
            "message": "Unable to get property 'type' of undefined or null reference",
            "name": "screen.orientation has type property",
            "result": false,
            "stack": "TypeError: Unable to get property 'type' of undefined or null reference\n   at Anonymous function (test?includePolyfills=yes:34964:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "screen.orientation",
            "message": "Unable to get property 'angle' of undefined or null reference",
            "name": "screen.orientation has angle property",
            "result": false,
            "stack": "TypeError: Unable to get property 'angle' of undefined or null reference\n   at Anonymous function (test?includePolyfills=yes:34968:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "requestIdleCallback",
            "message": "false == true",
            "name": "requestIdleCallback passes the feature detect",
            "result": false,
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:34974:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "globalThis",
            "message": "false == true",
            "name": "globalThis passes the feature detect",
            "result": false,
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:35456:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "globalThis",
            "message": "'globalThis' is undefined",
            "name": "globalThis globalThis is an object",
            "result": false,
            "stack": "ReferenceError: 'globalThis' is undefined\n   at Anonymous function (test?includePolyfills=yes:35489:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "globalThis",
            "message": "'globalThis' is undefined",
            "name": "globalThis globalThis is not enumerable",
            "result": false,
            "stack": "ReferenceError: 'globalThis' is undefined\n   at Anonymous function (test?includePolyfills=yes:35493:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "globalThis",
            "message": "'globalThis' is undefined",
            "name": "globalThis globalThis is not possible to invoke the global object as a function",
            "result": false,
            "stack": "ReferenceError: 'globalThis' is undefined\n   at Anonymous function (test?includePolyfills=yes:35498:7)\n   at functionThrows (test?includePolyfills=yes:17560:4)\n   at proclaim.throws (test?includePolyfills=yes:17021:3)\n   at Anonymous function (test?includePolyfills=yes:35497:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)"
          },
          {
            "failingSuite": "globalThis",
            "message": "'globalThis' is undefined",
            "name": "globalThis globalThis is not possible to use the global object as a constructor  with the new operator",
            "result": false,
            "stack": "ReferenceError: 'globalThis' is undefined\n   at Anonymous function (test?includePolyfills=yes:35504:7)\n   at functionThrows (test?includePolyfills=yes:17560:4)\n   at proclaim.throws (test?includePolyfills=yes:17021:3)\n   at Anonymous function (test?includePolyfills=yes:35503:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)"
          },
          {
            "failingSuite": "globalThis",
            "message": "'globalThis' is undefined",
            "name": "globalThis globalThis should be the global object",
            "result": false,
            "stack": "ReferenceError: 'globalThis' is undefined\n   at Anonymous function (test?includePolyfills=yes:35509:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "globalThis",
            "message": "'globalThis' is undefined",
            "name": "globalThis globalThis has correct descriptors defined",
            "result": false,
            "stack": "ReferenceError: 'globalThis' is undefined\n   at Anonymous function (test?includePolyfills=yes:35533:9)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "document.currentScript",
            "message": "false == true",
            "name": "document.currentScript passes the feature detect",
            "result": false,
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:35671:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "document.currentScript",
            "message": "undefined === object",
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "result": false,
            "stack": "AssertionError: undefined === object\n   at fail (test?includePolyfills=yes:17327:3)\n   at proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n   at proclaim.isTypeOf (test?includePolyfills=yes:17046:3)\n   at Anonymous function (test?includePolyfills=yes:35685:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)"
          },
          {
            "failingSuite": "document.currentScript",
            "message": "undefined === null",
            "name": "document.currentScript returns null when not invoked during synchronous evaluation",
            "result": false,
            "stack": "AssertionError: undefined === null\n   at fail (test?includePolyfills=yes:17327:3)\n   at proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n   at proclaim.isNull (test?includePolyfills=yes:17126:3)\n   at Anonymous function (test?includePolyfills=yes:35698:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)"
          },
          {
            "failingSuite": "console.timelineEnd",
            "message": "false == true",
            "name": "console.timelineEnd passes the feature detect",
            "result": false,
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:35758:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "console.timelineEnd",
            "message": "function () {\n\t\t\tconsole.timelineEnd();\n\t\t} !throws undefined",
            "name": "console.timelineEnd console timelineEnd()",
            "result": false,
            "stack": "AssertionError: function () {\n\t\t\tconsole.timelineEnd();\n\t\t} !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:35770:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "console.timeline",
            "message": "false == true",
            "name": "console.timeline passes the feature detect",
            "result": false,
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:35780:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "console.timeline",
            "message": "function () {\n\t\t\tconsole.timeline();\n\t\t} !throws undefined",
            "name": "console.timeline console timeline()",
            "result": false,
            "stack": "AssertionError: function () {\n\t\t\tconsole.timeline();\n\t\t} !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:35792:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "console.timeStamp",
            "message": "false == true",
            "name": "console.timeStamp passes the feature detect",
            "result": false,
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:35802:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "console.timeStamp",
            "message": "function () {\n\t\t\tconsole.timeStamp();\n\t\t} !throws undefined",
            "name": "console.timeStamp console timeStamp()",
            "result": false,
            "stack": "AssertionError: function () {\n\t\t\tconsole.timeStamp();\n\t\t} !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:35814:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "console.table",
            "message": "false == true",
            "name": "console.table passes the feature detect",
            "result": false,
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:35869:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "console.table",
            "message": "function () {\n\t\t\tconsole.table();\n\t\t} !throws undefined",
            "name": "console.table console table()",
            "result": false,
            "stack": "AssertionError: function () {\n\t\t\tconsole.table();\n\t\t} !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:35881:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "console.markTimeline",
            "message": "false == true",
            "name": "console.markTimeline passes the feature detect",
            "result": false,
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:35891:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "console.markTimeline",
            "message": "function () {\n\t\t\tconsole.markTimeline();\n\t\t} !throws undefined",
            "name": "console.markTimeline console markTimeline()",
            "result": false,
            "stack": "AssertionError: function () {\n\t\t\tconsole.markTimeline();\n\t\t} !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:35903:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "console.exception",
            "message": "false == true",
            "name": "console.exception passes the feature detect",
            "result": false,
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:36023:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "console.exception",
            "message": "function () {\n\t\t\tconsole.exception();\n\t\t} !throws undefined",
            "name": "console.exception console exception()",
            "result": false,
            "stack": "AssertionError: function () {\n\t\t\tconsole.exception();\n\t\t} !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at proclaim.doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:36035:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "WeakSet",
            "message": "false == true",
            "name": "WeakSet passes the feature detect",
            "result": false,
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:36321:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "WeakSet",
            "message": "'WeakSet' is undefined",
            "name": "WeakSet is a function",
            "result": false,
            "stack": "ReferenceError: 'WeakSet' is undefined\n   at Anonymous function (test?includePolyfills=yes:36332:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "WeakSet",
            "message": "'WeakSet' is undefined",
            "name": "WeakSet has correct name",
            "result": false,
            "stack": "ReferenceError: 'WeakSet' is undefined\n   at Anonymous function (test?includePolyfills=yes:36340:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "WeakSet",
            "message": "Unable to get property 'enumerable' of undefined or null reference",
            "name": "WeakSet is not enumerable",
            "result": false,
            "stack": "TypeError: Unable to get property 'enumerable' of undefined or null reference\n   at proclaim.isNotEnumerable (test?includePolyfills=yes:17269:5)\n   at Anonymous function (test?includePolyfills=yes:36344:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)"
          },
          {
            "failingSuite": "WeakSet",
            "message": "'WeakSet' is undefined",
            "name": "WeakSet has valid constructor",
            "result": false,
            "stack": "ReferenceError: 'WeakSet' is undefined\n   at Anonymous function (test?includePolyfills=yes:36348:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "WeakSet",
            "message": "'WeakSet' is undefined",
            "name": "WeakSet should be instantiable",
            "result": false,
            "stack": "ReferenceError: 'WeakSet' is undefined\n   at Anonymous function (test?includePolyfills=yes:36362:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "WeakSet",
            "message": "'WeakSet' is undefined",
            "name": "WeakSet has add, delete and has methods",
            "result": false,
            "stack": "ReferenceError: 'WeakSet' is undefined\n   at Anonymous function (test?includePolyfills=yes:36367:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "WeakSet",
            "message": "'WeakSet' is undefined",
            "name": "WeakSet should perform as expected",
            "result": false,
            "stack": "ReferenceError: 'WeakSet' is undefined\n   at Anonymous function (test?includePolyfills=yes:36373:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "WeakSet",
            "message": "'WeakSet' is undefined",
            "name": "WeakSet should be chainable",
            "result": false,
            "stack": "ReferenceError: 'WeakSet' is undefined\n   at Anonymous function (test?includePolyfills=yes:36400:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "WeakSet",
            "message": "'WeakSet' is undefined",
            "name": "WeakSet should be possible to prepopulate the set",
            "result": false,
            "stack": "ReferenceError: 'WeakSet' is undefined\n   at Anonymous function (test?includePolyfills=yes:36410:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "WeakMap",
            "message": "false == true",
            "name": "WeakMap passes the feature detect",
            "result": false,
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:36425:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "WeakMap",
            "message": "undefined == WeakMap",
            "name": "WeakMap has valid constructor",
            "result": false,
            "stack": "AssertionError: undefined == WeakMap\n   at fail (test?includePolyfills=yes:17327:3)\n   at proclaim.equal (test?includePolyfills=yes:16963:4)\n   at Anonymous function (test?includePolyfills=yes:36455:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "WeakMap",
            "message": "Unable to get property 'set' of undefined or null reference",
            "name": "WeakMap should be chainable",
            "result": false,
            "stack": "TypeError: Unable to get property 'set' of undefined or null reference\n   at Anonymous function (test?includePolyfills=yes:36506:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "WeakMap",
            "message": "undefined == 12",
            "name": "WeakMap should be possible to prepopulate the map",
            "result": false,
            "stack": "AssertionError: undefined == 12\n   at fail (test?includePolyfills=yes:17327:3)\n   at proclaim.equal (test?includePolyfills=yes:16963:4)\n   at Anonymous function (test?includePolyfills=yes:36520:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "WeakMap",
            "message": "false === true",
            "name": "WeakMap supports frozen objects",
            "result": false,
            "stack": "AssertionError: false === true\n   at fail (test?includePolyfills=yes:17327:3)\n   at proclaim.strictEqual (test?includePolyfills=yes:16980:4)\n   at proclaim.isTrue (test?includePolyfills=yes:17094:3)\n   at Anonymous function (test?includePolyfills=yes:36528:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)"
          },
          {
            "failingSuite": "WeakMap",
            "message": "undefined deepEqual [object Object]",
            "name": "WeakMap WeakMap.prototype.set",
            "result": false,
            "stack": "AssertionError: undefined deepEqual [object Object]\n   at fail (test?includePolyfills=yes:17327:3)\n   at proclaim.deepEqual (test?includePolyfills=yes:16994:4)\n   at Anonymous function (test?includePolyfills=yes:36608:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "URL",
            "message": "false == true",
            "name": "URL passes the feature detect",
            "result": false,
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:36982:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "URL",
            "message": "Object doesn't support this action",
            "name": "URL URL IDL",
            "result": false,
            "stack": "TypeError: Object doesn't support this action\n   at Anonymous function (test?includePolyfills=yes:36996:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "URL",
            "message": "Object doesn't support this action",
            "name": "URL URL Stringifying",
            "result": false,
            "stack": "TypeError: Object doesn't support this action\n   at Anonymous function (test?includePolyfills=yes:37009:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "URL",
            "message": "Object doesn't support this action",
            "name": "URL URL Parsing",
            "result": false,
            "stack": "TypeError: Object doesn't support this action\n   at Anonymous function (test?includePolyfills=yes:37014:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "URL",
            "message": "Object doesn't support this action",
            "name": "URL URL Mutation",
            "result": false,
            "stack": "TypeError: Object doesn't support this action\n   at Anonymous function (test?includePolyfills=yes:37027:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "URL",
            "message": "Object doesn't support this action",
            "name": "URL Parameter Mutation",
            "result": false,
            "stack": "TypeError: Object doesn't support this action\n   at Anonymous function (test?includePolyfills=yes:37096:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "URL",
            "message": "Object doesn't support this action",
            "name": "URL Parameter Encoding",
            "result": false,
            "stack": "TypeError: Object doesn't support this action\n   at Anonymous function (test?includePolyfills=yes:37145:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "URL",
            "message": "Object doesn't support this action",
            "name": "URL Base URL",
            "result": false,
            "stack": "TypeError: Object doesn't support this action\n   at Anonymous function (test?includePolyfills=yes:37164:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "URL",
            "message": "Object doesn't support this action",
            "name": "URL URLSearchParams",
            "result": false,
            "stack": "TypeError: Object doesn't support this action\n   at Anonymous function (test?includePolyfills=yes:37193:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "URL",
            "message": "'URLSearchParams' is undefined",
            "name": "URL URLSearchParams mutation",
            "result": false,
            "stack": "ReferenceError: 'URLSearchParams' is undefined\n   at Anonymous function (test?includePolyfills=yes:37218:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "URL",
            "message": "Object doesn't support this action",
            "name": "URL Regression tests",
            "result": false,
            "stack": "TypeError: Object doesn't support this action\n   at Anonymous function (test?includePolyfills=yes:37305:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "Symbol.unscopables",
            "message": "false == true",
            "name": "Symbol.unscopables passes the feature detect",
            "result": false,
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:37314:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "Symbol.unscopables",
            "message": "'Symbol' is undefined",
            "name": "Symbol.unscopables has the well known symbol unscopables as static properties on Symbol",
            "result": false,
            "stack": "ReferenceError: 'Symbol' is undefined\n   at Anonymous function (test?includePolyfills=yes:37336:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "Symbol.toStringTag",
            "message": "false == true",
            "name": "Symbol.toStringTag passes the feature detect",
            "result": false,
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:37347:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "Symbol.toStringTag",
            "message": "'Symbol' is undefined",
            "name": "Symbol.toStringTag has the well known symbol toStringTag as static properties on Symbol",
            "result": false,
            "stack": "ReferenceError: 'Symbol' is undefined\n   at Anonymous function (test?includePolyfills=yes:37369:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "Symbol.toPrimitive",
            "message": "false == true",
            "name": "Symbol.toPrimitive passes the feature detect",
            "result": false,
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:37381:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "Symbol.toPrimitive",
            "message": "'Symbol' is undefined",
            "name": "Symbol.toPrimitive has the well known symbol toPrimitive as static properties on Symbol",
            "result": false,
            "stack": "ReferenceError: 'Symbol' is undefined\n   at Anonymous function (test?includePolyfills=yes:37403:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "Symbol.split",
            "message": "false == true",
            "name": "Symbol.split passes the feature detect",
            "result": false,
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:37415:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "Symbol.split",
            "message": "'Symbol' is undefined",
            "name": "Symbol.split has the well known symbol split as static properties on Symbol",
            "result": false,
            "stack": "ReferenceError: 'Symbol' is undefined\n   at Anonymous function (test?includePolyfills=yes:37437:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "Symbol.species",
            "message": "false == true",
            "name": "Symbol.species passes the feature detect",
            "result": false,
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:37449:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "Symbol.species",
            "message": "'Symbol' is undefined",
            "name": "Symbol.species has the well known symbol species as static properties on Symbol",
            "result": false,
            "stack": "ReferenceError: 'Symbol' is undefined\n   at Anonymous function (test?includePolyfills=yes:37471:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "Symbol.search",
            "message": "false == true",
            "name": "Symbol.search passes the feature detect",
            "result": false,
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:37483:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "Symbol.search",
            "message": "'Symbol' is undefined",
            "name": "Symbol.search has the well known symbol search as static properties on Symbol",
            "result": false,
            "stack": "ReferenceError: 'Symbol' is undefined\n   at Anonymous function (test?includePolyfills=yes:37505:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "Symbol.replace",
            "message": "false == true",
            "name": "Symbol.replace passes the feature detect",
            "result": false,
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:37517:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)"
          },
          {
            "failingSuite": "Symbol.replace",
            "message": "'Symbol' is undefined",
            "name": "Symbol.replace has the well known symbol replace as static properties on Symbol",
            "result": false,
            "stack": "ReferenceError: 'Symbol' is undefined\n   at Anonymous function (test?includePolyfills=yes:37539:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "Unable to get property 'prototype' of undefined or null reference",
            "name": "Symbol.prototype.description passes the feature detect",
            "result": false,
            "stack": "TypeError: Unable to get property 'prototype' of undefined or null reference\n   at Anonymous function (test?includePolyfills=yes:37552:13)\n   at Anonymous function (test?includePolyfills=yes:37551:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)"
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "'Symbol' is undefined",
            "name": "Symbol.prototype.description is defined",
            "result": false,
            "stack": "ReferenceError: 'Symbol' is undefined\n   at Anonymous function (test?includePolyfills=yes:37561:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "'Symbol' is undefined",
            "name": "Symbol.prototype.description is not enumerable",
            "result": false,
            "stack": "ReferenceError: 'Symbol' is undefined\n   at Anonymous function (test?includePolyfills=yes:37565:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "'Symbol' is undefined",
            "name": "Symbol.prototype.description is configurable",
            "result": false,
            "stack": "ReferenceError: 'Symbol' is undefined\n   at Anonymous function (test?includePolyfills=yes:37570:9)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "'Symbol' is undefined",
            "name": "Symbol.prototype.description works with numbers",
            "result": false,
            "stack": "ReferenceError: 'Symbol' is undefined\n   at Anonymous function (test?includePolyfills=yes:37575:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "'Symbol' is undefined",
            "name": "Symbol.prototype.description works with booleans",
            "result": false,
            "stack": "ReferenceError: 'Symbol' is undefined\n   at Anonymous function (test?includePolyfills=yes:37579:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "'Symbol' is undefined",
            "name": "Symbol.prototype.description works with null",
            "result": false,
            "stack": "ReferenceError: 'Symbol' is undefined\n   at Anonymous function (test?includePolyfills=yes:37583:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "'Symbol' is undefined",
            "name": "Symbol.prototype.description works with undefined",
            "result": false,
            "stack": "ReferenceError: 'Symbol' is undefined\n   at Anonymous function (test?includePolyfills=yes:37587:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "'Symbol' is undefined",
            "name": "Symbol.prototype.description works with arrays",
            "result": false,
            "stack": "ReferenceError: 'Symbol' is undefined\n   at Anonymous function (test?includePolyfills=yes:37591:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "'Symbol' is undefined",
            "name": "Symbol.prototype.description works with objects",
            "result": false,
            "stack": "ReferenceError: 'Symbol' is undefined\n   at Anonymous function (test?includePolyfills=yes:37595:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "'Symbol' is undefined",
            "name": "Symbol.prototype.description works with regexes",
            "result": false,
            "stack": "ReferenceError: 'Symbol' is undefined\n   at Anonymous function (test?includePolyfills=yes:37599:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "'Symbol' is undefined",
            "name": "Symbol.prototype.description works with NaNs",
            "result": false,
            "stack": "ReferenceError: 'Symbol' is undefined\n   at Anonymous function (test?includePolyfills=yes:37603:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "'Symbol' is undefined",
            "name": "Symbol.prototype.description works with functions",
            "result": false,
            "stack": "ReferenceError: 'Symbol' is undefined\n   at Anonymous function (test?includePolyfills=yes:37607:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "'Symbol' is undefined",
            "name": "Symbol.prototype.description works with no input",
            "result": false,
            "stack": "ReferenceError: 'Symbol' is undefined\n   at Anonymous function (test?includePolyfills=yes:37611:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          },
          {
            "failingSuite": "Symbol.prototype.description",
            "message": "'Symbol' is undefined",
            "name": "Symbol.prototype.description works with an empty string",
            "result": false,
            "stack": "ReferenceError: 'Symbol' is undefined\n   at Anonymous function (test?includePolyfills=yes:37615:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at Runnable.prototype.run (test?includePolyfills=yes:4807:7)\n   at Runner.prototype.runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)"
          }
        ],
        "failingSuites": [
          "Symbol.prototype.description",
          "Symbol.replace",
          "Symbol.search",
          "Symbol.species",
          "Symbol.split",
          "Symbol.toPrimitive",
          "Symbol.toStringTag",
          "Symbol.unscopables",
          "URL",
          "WeakMap",
          "WeakSet",
          "console.exception",
          "console.markTimeline",
          "console.table",
          "console.timeStamp",
          "console.timeline",
          "console.timelineEnd",
          "document.currentScript",
          "globalThis",
          "requestIdleCallback",
          "screen.orientation",
          "smoothscroll"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description"
        ]
      }
    },
    "10.0": {
      "all": {
        "passed": 1361,
        "failed": 135,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:34867:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "requestIdleCallback passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:34974:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "requestIdleCallback"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": "AssertionError:  include http://localhost:9876/base/polyfills/document/currentScript/tests.js\n   at fail (test?includePolyfills=yes:17327:3)\n   at include (test?includePolyfills=yes:17191:4)\n   at Anonymous function (test?includePolyfills=yes:35693:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "console.trace passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:35736:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "console.trace"
          },
          {
            "result": false,
            "name": "console.trace console trace()",
            "stack": "AssertionError: function () {\n\t\t\tconsole.trace();\n\t\t} !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:35748:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function () {\n\t\t\tconsole.trace();\n\t\t} !throws undefined",
            "failingSuite": "console.trace"
          },
          {
            "result": false,
            "name": "console.timelineEnd passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:35758:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "console.timelineEnd"
          },
          {
            "result": false,
            "name": "console.timelineEnd console timelineEnd()",
            "stack": "AssertionError: function () {\n\t\t\tconsole.timelineEnd();\n\t\t} !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:35770:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function () {\n\t\t\tconsole.timelineEnd();\n\t\t} !throws undefined",
            "failingSuite": "console.timelineEnd"
          },
          {
            "result": false,
            "name": "console.timeline passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:35780:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "console.timeline"
          },
          {
            "result": false,
            "name": "console.timeline console timeline()",
            "stack": "AssertionError: function () {\n\t\t\tconsole.timeline();\n\t\t} !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:35792:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function () {\n\t\t\tconsole.timeline();\n\t\t} !throws undefined",
            "failingSuite": "console.timeline"
          },
          {
            "result": false,
            "name": "console.timeStamp passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:35802:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "console.timeStamp"
          },
          {
            "result": false,
            "name": "console.timeStamp console timeStamp()",
            "stack": "AssertionError: function () {\n\t\t\tconsole.timeStamp();\n\t\t} !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:35814:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function () {\n\t\t\tconsole.timeStamp();\n\t\t} !throws undefined",
            "failingSuite": "console.timeStamp"
          },
          {
            "result": false,
            "name": "console.timeEnd passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:35824:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "console.timeEnd"
          },
          {
            "result": false,
            "name": "console.timeEnd console timeEnd()",
            "stack": "AssertionError: function () {\n\t\t\tconsole.time('testTimeEnd');\n\t\t\tconsole.timeEnd('testTimeEnd');\n\t\t} !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:35836:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function () {\n\t\t\tconsole.time('testTimeEnd');\n\t\t\tconsole.timeEnd('testTimeEnd');\n\t\t} !throws undefined",
            "failingSuite": "console.timeEnd"
          },
          {
            "result": false,
            "name": "console.time passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:35847:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "console.time"
          },
          {
            "result": false,
            "name": "console.time console time()",
            "stack": "AssertionError: function () {\n\t\t\tconsole.time();\n\t\t} !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:35859:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function () {\n\t\t\tconsole.time();\n\t\t} !throws undefined",
            "failingSuite": "console.time"
          },
          {
            "result": false,
            "name": "console.table passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:35869:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "console.table"
          },
          {
            "result": false,
            "name": "console.table console table()",
            "stack": "AssertionError: function () {\n\t\t\tconsole.table();\n\t\t} !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:35881:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function () {\n\t\t\tconsole.table();\n\t\t} !throws undefined",
            "failingSuite": "console.table"
          },
          {
            "result": false,
            "name": "console.markTimeline passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:35891:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "console.markTimeline"
          },
          {
            "result": false,
            "name": "console.markTimeline console markTimeline()",
            "stack": "AssertionError: function () {\n\t\t\tconsole.markTimeline();\n\t\t} !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:35903:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function () {\n\t\t\tconsole.markTimeline();\n\t\t} !throws undefined",
            "failingSuite": "console.markTimeline"
          },
          {
            "result": false,
            "name": "console.groupEnd passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:35957:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "console.groupEnd"
          },
          {
            "result": false,
            "name": "console.groupEnd console groupEnd()",
            "stack": "AssertionError: function () {\n\t\t\tconsole.groupEnd();\n\t\t} !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:35969:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function () {\n\t\t\tconsole.groupEnd();\n\t\t} !throws undefined",
            "failingSuite": "console.groupEnd"
          },
          {
            "result": false,
            "name": "console.groupCollapsed passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:35979:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "console.groupCollapsed"
          },
          {
            "result": false,
            "name": "console.groupCollapsed console groupCollapsed()",
            "stack": "AssertionError: function () {\n\t\t\tconsole.groupCollapsed();\n\t\t} !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:35991:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function () {\n\t\t\tconsole.groupCollapsed();\n\t\t} !throws undefined",
            "failingSuite": "console.groupCollapsed"
          },
          {
            "result": false,
            "name": "console.group passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:36001:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "console.group"
          },
          {
            "result": false,
            "name": "console.group console group()",
            "stack": "AssertionError: function () {\n\t\t\tconsole.group();\n\t\t} !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:36013:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function () {\n\t\t\tconsole.group();\n\t\t} !throws undefined",
            "failingSuite": "console.group"
          },
          {
            "result": false,
            "name": "console.exception passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:36023:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "console.exception"
          },
          {
            "result": false,
            "name": "console.exception console exception()",
            "stack": "AssertionError: function () {\n\t\t\tconsole.exception();\n\t\t} !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:36035:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function () {\n\t\t\tconsole.exception();\n\t\t} !throws undefined",
            "failingSuite": "console.exception"
          },
          {
            "result": false,
            "name": "console.dirxml passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:36067:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "console.dirxml"
          },
          {
            "result": false,
            "name": "console.dirxml console dir()",
            "stack": "AssertionError: function () {\n\t\t\tconsole.dirxml(document.body); // argument requied for IE11\n\t\t} !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:36079:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function () {\n\t\t\tconsole.dirxml(document.body); // argument requied for IE11\n\t\t} !throws undefined",
            "failingSuite": "console.dirxml"
          },
          {
            "result": false,
            "name": "console.debug passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:36111:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "console.debug"
          },
          {
            "result": false,
            "name": "console.debug console debug()",
            "stack": "AssertionError: function () {\n\t\t\tconsole.debug();\n\t\t} !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:36123:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function () {\n\t\t\tconsole.debug();\n\t\t} !throws undefined",
            "failingSuite": "console.debug"
          },
          {
            "result": false,
            "name": "console.count passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:36133:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "console.count"
          },
          {
            "result": false,
            "name": "console.count console count()",
            "stack": "AssertionError: function () {\n\t\t\tconsole.count();\n\t\t} !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:36145:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function () {\n\t\t\tconsole.count();\n\t\t} !throws undefined",
            "failingSuite": "console.count"
          },
          {
            "result": false,
            "name": "WeakSet passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:36321:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "WeakSet"
          },
          {
            "result": false,
            "name": "WeakSet is a function",
            "stack": "ReferenceError: 'WeakSet' is undefined\n   at Anonymous function (test?includePolyfills=yes:36332:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "'WeakSet' is undefined",
            "failingSuite": "WeakSet"
          },
          {
            "result": false,
            "name": "WeakSet has correct name",
            "stack": "ReferenceError: 'WeakSet' is undefined\n   at Anonymous function (test?includePolyfills=yes:36340:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "'WeakSet' is undefined",
            "failingSuite": "WeakSet"
          },
          {
            "result": false,
            "name": "WeakSet is not enumerable",
            "stack": "TypeError: Unable to get property 'enumerable' of undefined or null reference\n   at isNotEnumerable (test?includePolyfills=yes:17269:5)\n   at Anonymous function (test?includePolyfills=yes:36344:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)",
            "message": "Unable to get property 'enumerable' of undefined or null reference",
            "failingSuite": "WeakSet"
          },
          {
            "result": false,
            "name": "WeakSet has valid constructor",
            "stack": "ReferenceError: 'WeakSet' is undefined\n   at Anonymous function (test?includePolyfills=yes:36348:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "'WeakSet' is undefined",
            "failingSuite": "WeakSet"
          },
          {
            "result": false,
            "name": "WeakSet should be instantiable",
            "stack": "ReferenceError: 'WeakSet' is undefined\n   at Anonymous function (test?includePolyfills=yes:36362:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "'WeakSet' is undefined",
            "failingSuite": "WeakSet"
          },
          {
            "result": false,
            "name": "WeakSet has add, delete and has methods",
            "stack": "ReferenceError: 'WeakSet' is undefined\n   at Anonymous function (test?includePolyfills=yes:36367:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "'WeakSet' is undefined",
            "failingSuite": "WeakSet"
          },
          {
            "result": false,
            "name": "WeakSet should perform as expected",
            "stack": "ReferenceError: 'WeakSet' is undefined\n   at Anonymous function (test?includePolyfills=yes:36373:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "'WeakSet' is undefined",
            "failingSuite": "WeakSet"
          },
          {
            "result": false,
            "name": "WeakSet should be chainable",
            "stack": "ReferenceError: 'WeakSet' is undefined\n   at Anonymous function (test?includePolyfills=yes:36400:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "'WeakSet' is undefined",
            "failingSuite": "WeakSet"
          },
          {
            "result": false,
            "name": "WeakSet should be possible to prepopulate the set",
            "stack": "ReferenceError: 'WeakSet' is undefined\n   at Anonymous function (test?includePolyfills=yes:36410:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "'WeakSet' is undefined",
            "failingSuite": "WeakSet"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": "AssertionError: undefined === WeakMap\n   at fail (test?includePolyfills=yes:17327:3)\n   at strictEqual (test?includePolyfills=yes:16980:4)\n   at Anonymous function (test?includePolyfills=yes:36613:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": "AssertionError: undefined === 1\n   at fail (test?includePolyfills=yes:17327:3)\n   at strictEqual (test?includePolyfills=yes:16980:4)\n   at Anonymous function (test?includePolyfills=yes:37575:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "undefined === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": "AssertionError: undefined === true\n   at fail (test?includePolyfills=yes:17327:3)\n   at strictEqual (test?includePolyfills=yes:16980:4)\n   at Anonymous function (test?includePolyfills=yes:37579:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "undefined === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": "AssertionError: undefined === null\n   at fail (test?includePolyfills=yes:17327:3)\n   at strictEqual (test?includePolyfills=yes:16980:4)\n   at Anonymous function (test?includePolyfills=yes:37583:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "undefined === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with arrays",
            "stack": "AssertionError: undefined === \n   at fail (test?includePolyfills=yes:17327:3)\n   at strictEqual (test?includePolyfills=yes:16980:4)\n   at Anonymous function (test?includePolyfills=yes:37591:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": "AssertionError: undefined === [object Object]\n   at fail (test?includePolyfills=yes:17327:3)\n   at strictEqual (test?includePolyfills=yes:16980:4)\n   at Anonymous function (test?includePolyfills=yes:37595:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "undefined === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": "AssertionError: undefined === /./\n   at fail (test?includePolyfills=yes:17327:3)\n   at strictEqual (test?includePolyfills=yes:16980:4)\n   at Anonymous function (test?includePolyfills=yes:37599:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "undefined === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": "AssertionError: undefined === NaN\n   at fail (test?includePolyfills=yes:17327:3)\n   at strictEqual (test?includePolyfills=yes:16980:4)\n   at Anonymous function (test?includePolyfills=yes:37603:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "undefined === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": "AssertionError: undefined === function(){}\n   at fail (test?includePolyfills=yes:17327:3)\n   at strictEqual (test?includePolyfills=yes:16980:4)\n   at Anonymous function (test?includePolyfills=yes:37607:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "undefined === function(){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with an empty string",
            "stack": "AssertionError: undefined === \n   at fail (test?includePolyfills=yes:17327:3)\n   at strictEqual (test?includePolyfills=yes:16980:4)\n   at Anonymous function (test?includePolyfills=yes:37615:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "undefined === ",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description does not throw an error if context is a symbol",
            "stack": "AssertionError: function() {\n            getter.call(Symbol());\n        } !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:37624:9)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function() {\n            getter.call(Symbol());\n        } !throws undefined",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:37686:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at notEqual (test?includePolyfills=yes:16972:4)\n   at Anonymous function (test?includePolyfills=yes:37708:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:37720:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at notEqual (test?includePolyfills=yes:16972:4)\n   at Anonymous function (test?includePolyfills=yes:37742:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:37795:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at notEqual (test?includePolyfills=yes:16972:4)\n   at Anonymous function (test?includePolyfills=yes:37817:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:37829:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at notEqual (test?includePolyfills=yes:16972:4)\n   at Anonymous function (test?includePolyfills=yes:37851:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:37863:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": "AssertionError: undefined != undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at notEqual (test?includePolyfills=yes:16972:4)\n   at Anonymous function (test?includePolyfills=yes:37885:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:37898:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": "AssertionError: function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at throws (test?includePolyfills=yes:17022:4)\n   at Anonymous function (test?includePolyfills=yes:37942:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": "AssertionError: function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }\n   at fail (test?includePolyfills=yes:17327:3)\n   at equal (test?includePolyfills=yes:16963:4)\n   at Anonymous function (test?includePolyfills=yes:37946:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function Symbol() {\n\t\tvar description = arguments[0];\n\t\tif (this instanceof Symbol) {\n\t\t\tthrow new TypeError('Symbol is not a constructor');\n\t\t}\n\t\treturn setAndGetSymbol(\n\t\t\tprefix.concat(description || '', random, ++id)\n\t\t);\n\t\t} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": "AssertionError: undefined instanceof \nfunction Function() {\n    [native code]\n}\n\n   at fail (test?includePolyfills=yes:17327:3)\n   at isInstanceOf (test?includePolyfills=yes:17057:4)\n   at Anonymous function (test?includePolyfills=yes:37993:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "undefined instanceof \nfunction Function() {\n    [native code]\n}\n",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": "AssertionError: function() {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:38026:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function() {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "TypeError: Object doesn't support property or method 'for'\n   at Anonymous function (test?includePolyfills=yes:38040:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "Object doesn't support property or method 'for'",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "TypeError: Object doesn't support property or method 'for'\n   at Anonymous function (test?includePolyfills=yes:38045:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "Object doesn't support property or method 'for'",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "TypeError: Object doesn't support property or method 'for'\n   at Anonymous function (test?includePolyfills=yes:38051:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "Object doesn't support property or method 'for'",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if nextKey is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at throws (test?includePolyfills=yes:17022:4)\n   at Anonymous function (test?includePolyfills=yes:38173:9)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: 1,\n                    0: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if length is a Symbol",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at throws (test?includePolyfills=yes:17022:4)\n   at Anonymous function (test?includePolyfills=yes:38186:9)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function () {\n            String.raw({\n                raw: {\n                    length: Symbol()\n                }\n            });\n        } throws undefined",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.raw throws a TypeError if a Symbol is used as a substitution",
            "stack": "AssertionError: function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws \nfunction TypeError() {\n    [native code]\n}\n\n   at fail (test?includePolyfills=yes:17327:3)\n   at throws (test?includePolyfills=yes:17022:4)\n   at Anonymous function (test?includePolyfills=yes:38213:9)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function () {\n            String.raw({\n                raw: ['a', 'b', 'c']\n            }, '', Symbol(''));\n        } throws \nfunction TypeError() {\n    [native code]\n}\n",
            "failingSuite": "String.raw"
          },
          {
            "result": false,
            "name": "String.prototype.trim works as expected",
            "stack": "AssertionError: shouldn't remove zero width space characters as they are not in the Zs Unicode category\n   at fail (test?includePolyfills=yes:17327:3)\n   at strictEqual (test?includePolyfills=yes:16980:4)\n   at Anonymous function (test?includePolyfills=yes:38399:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "shouldn't remove zero width space characters as they are not in the Zs Unicode category",
            "failingSuite": "String.prototype.trim"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:39821:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:39979:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "Promise.prototype.finally is not enumerable",
            "stack": "AssertionError: true === false\n   at fail (test?includePolyfills=yes:17327:3)\n   at strictEqual (test?includePolyfills=yes:16980:4)\n   at isFalse (test?includePolyfills=yes:17099:3)\n   at isNotEnumerable (test?includePolyfills=yes:17269:5)\n   at Anonymous function (test?includePolyfills=yes:41502:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)",
            "message": "true === false",
            "failingSuite": "Promise.prototype.finally"
          },
          {
            "result": false,
            "name": "Promise.prototype.finally onFinally no callback from resolved",
            "stack": "Error: should not be called\n   at onRejected (test?includePolyfills=yes:41569:6)\n   at X (test?includePolyfills=yes:24646:3808)\n   at Y (test?includePolyfills=yes:24646:902)\n   at Anonymous function (test?includePolyfills=yes:24646:2968)\n   at i (test?includePolyfills=yes:24646:1049)",
            "message": "should not be called",
            "failingSuite": "Promise.prototype.finally"
          },
          {
            "result": false,
            "name": "Promise.prototype.finally onFinally no callback from rejected",
            "stack": "AssertionError: TypeError: Object expected === [object Object]\n   at fail (test?includePolyfills=yes:17327:3)\n   at strictEqual (test?includePolyfills=yes:16980:4)\n   at onRejected (test?includePolyfills=yes:41581:6)\n   at X (test?includePolyfills=yes:24646:3808)\n   at Y (test?includePolyfills=yes:24646:902)\n   at Anonymous function (test?includePolyfills=yes:24646:2968)\n   at i (test?includePolyfills=yes:24646:1049)",
            "message": "TypeError: Object expected === [object Object]",
            "failingSuite": "Promise.prototype.finally"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `undefined`",
            "stack": "AssertionError: function() {\n        Object.seal(undefined);\n    } !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:42235:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function() {\n        Object.seal(undefined);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `null`",
            "stack": "AssertionError: function() {\n        Object.seal(null);\n    } !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:42241:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function() {\n        Object.seal(null);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `true`",
            "stack": "AssertionError: function() {\n        Object.seal(true);\n    } !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:42247:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function() {\n        Object.seal(true);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is `false`",
            "stack": "AssertionError: function() {\n        Object.seal(false);\n    } !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:42253:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function() {\n        Object.seal(false);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a string",
            "stack": "AssertionError: function() {\n        Object.seal('a');\n    } !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:42259:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function() {\n        Object.seal('a');\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal does not throw TypeError if argument is a number",
            "stack": "AssertionError: function() {\n        Object.seal(0);\n    } !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:42265:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function() {\n        Object.seal(0);\n    } !throws undefined",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.seal returns the argument",
            "stack": "TypeError: Object.seal: argument is not an Object\n   at Anonymous function (test?includePolyfills=yes:42279:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "Object.seal: argument is not an Object",
            "failingSuite": "Object.seal"
          },
          {
            "result": false,
            "name": "Object.preventExtensions does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.preventExtensions(1);\n    } !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:42320:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function () {\n        Object.preventExtensions(1);\n    } !throws undefined",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.preventExtensions returns argument if given a primitive",
            "stack": "TypeError: Object.preventExtensions: argument is not an Object\n   at Anonymous function (test?includePolyfills=yes:42338:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "Object.preventExtensions: argument is not an Object",
            "failingSuite": "Object.preventExtensions"
          },
          {
            "result": false,
            "name": "Object.isSealed does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isSealed(1);\n    } !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:42514:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function () {\n        Object.isSealed(1);\n    } !throws undefined",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isSealed returns true for primitives",
            "stack": "TypeError: Object.isSealed: argument is not an Object\n   at Anonymous function (test?includePolyfills=yes:42532:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "Object.isSealed: argument is not an Object",
            "failingSuite": "Object.isSealed"
          },
          {
            "result": false,
            "name": "Object.isFrozen does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isFrozen(1);\n    } !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:42571:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function () {\n        Object.isFrozen(1);\n    } !throws undefined",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isFrozen returns true for primitives",
            "stack": "TypeError: Object.isFrozen: argument is not an Object\n   at Anonymous function (test?includePolyfills=yes:42589:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "Object.isFrozen: argument is not an Object",
            "failingSuite": "Object.isFrozen"
          },
          {
            "result": false,
            "name": "Object.isExtensible does not throw on primitives",
            "stack": "AssertionError: function () {\n        Object.isExtensible(1);\n    } !throws undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at doesNotThrow (test?includePolyfills=yes:17040:4)\n   at Anonymous function (test?includePolyfills=yes:42628:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function () {\n        Object.isExtensible(1);\n    } !throws undefined",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.isExtensible returns false for primitives",
            "stack": "TypeError: Object.isExtensible: argument is not an Object\n   at Anonymous function (test?includePolyfills=yes:42646:5)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "Object.isExtensible: argument is not an Object",
            "failingSuite": "Object.isExtensible"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames returns an empty array for booleans and numbers",
            "stack": "TypeError: Object.getOwnPropertyNames: argument is not an Object\n   at getOwnPropertyNames (test?includePolyfills=yes:26964:3)\n   at getOwnPropertyNames (test?includePolyfills=yes:27087:3)\n   at Anonymous function (test?includePolyfills=yes:42775:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "Object.getOwnPropertyNames: argument is not an Object",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.getOwnPropertyNames splits a string into an array",
            "stack": "TypeError: Object.getOwnPropertyNames: argument is not an Object\n   at getOwnPropertyNames (test?includePolyfills=yes:26964:3)\n   at getOwnPropertyNames (test?includePolyfills=yes:27087:3)\n   at Anonymous function (test?includePolyfills=yes:42780:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "Object.getOwnPropertyNames: argument is not an Object",
            "failingSuite": "Object.getOwnPropertyNames"
          },
          {
            "result": false,
            "name": "Object.defineProperty has correct name",
            "stack": "AssertionError: defineProp == defineProperty\n   at fail (test?includePolyfills=yes:17327:3)\n   at equal (test?includePolyfills=yes:16963:4)\n   at hasName (test?includePolyfills=yes:17246:4)\n   at Anonymous function (test?includePolyfills=yes:43523:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)",
            "message": "defineProp == defineProperty",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "Object.defineProperty Error handling Throws an error when descriptor is a non-object",
            "stack": "TypeError: Invalid descriptor for property 'foo'\n   at defineProp (test?includePolyfills=yes:27065:4)\n   at Anonymous function (test?includePolyfills=yes:43647:4)\n   at functionThrows (test?includePolyfills=yes:17560:4)\n   at throws (test?includePolyfills=yes:17021:3)\n   at Anonymous function (test?includePolyfills=yes:43646:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)",
            "message": "Invalid descriptor for property 'foo'",
            "failingSuite": "Object.defineProperty"
          },
          {
            "result": false,
            "name": "Object.create Should set the prototype of the passed-in object",
            "stack": "AssertionError: [object Object] == [object Object]\n   at fail (test?includePolyfills=yes:17327:3)\n   at equal (test?includePolyfills=yes:16963:4)\n   at Anonymous function (test?includePolyfills=yes:43822:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "[object Object] == [object Object]",
            "failingSuite": "Object.create"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:44414:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at Anonymous function (test?includePolyfills=yes:44433:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:45838:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Map Map has correct descriptors defined for Map.name",
            "stack": "TypeError: Unable to get property 'configurable' of undefined or null reference\n   at Anonymous function (test?includePolyfills=yes:45922:6)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "Unable to get property 'configurable' of undefined or null reference",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "IntersectionObserverEntry passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:46536:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "IntersectionObserverEntry"
          },
          {
            "result": false,
            "name": "IntersectionObserverEntry IntersectionObserverEntry has an isIntersecting property",
            "stack": "ReferenceError: 'IntersectionObserverEntry' is undefined\n   at Anonymous function (test?includePolyfills=yes:46547:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "'IntersectionObserverEntry' is undefined",
            "failingSuite": "IntersectionObserverEntry"
          },
          {
            "result": false,
            "name": "HTMLTemplateElement passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:46554:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "HTMLTemplateElement"
          },
          {
            "result": false,
            "name": "Event passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:47382:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "Event"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:47566:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "Element.prototype.inert passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:47881:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "Element.prototype.inert"
          },
          {
            "result": false,
            "name": "Element.prototype.inert inert get",
            "stack": "AssertionError: undefined == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at equal (test?includePolyfills=yes:16963:4)\n   at Anonymous function (test?includePolyfills=yes:47906:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "undefined == true",
            "failingSuite": "Element.prototype.inert"
          },
          {
            "result": false,
            "name": "Element.prototype.inert inert set",
            "stack": "AssertionError: expected attribute access `inert` to be `null` but was \n   at fail (test?includePolyfills=yes:17327:3)\n   at equal (test?includePolyfills=yes:16963:4)\n   at Anonymous function (test?includePolyfills=yes:47921:5)",
            "message": "expected attribute access `inert` to be `null` but was ",
            "failingSuite": "Element.prototype.inert"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:48556:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": "AssertionError: undefined  undefined\n   at fail (test?includePolyfills=yes:17327:3)\n   at Anonymous function (test?includePolyfills=yes:48574:3)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "CustomEvent passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:48759:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "CustomEvent"
          },
          {
            "result": false,
            "name": "CustomEvent should have correct default properties",
            "stack": "TypeError: Object doesn't support this action\n   at Anonymous function (test?includePolyfills=yes:48784:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "Object doesn't support this action",
            "failingSuite": "CustomEvent"
          },
          {
            "result": false,
            "name": "CustomEvent should modify default properties if optional CustomEventInit parameter is passed",
            "stack": "TypeError: Object doesn't support this action\n   at Anonymous function (test?includePolyfills=yes:48792:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "Object doesn't support this action",
            "failingSuite": "CustomEvent"
          },
          {
            "result": false,
            "name": "CustomEvent should be able to fire an event that can be listened to",
            "stack": "TypeError: Object doesn't support this action\n   at Anonymous function (test?includePolyfills=yes:48805:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "Object doesn't support this action",
            "failingSuite": "CustomEvent"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:49577:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.flat throws TypeError if argument is a Symbol",
            "stack": "AssertionError: function () {\n            [].flat(Symbol());\n        } throws \nfunction TypeError() {\n    [native code]\n}\n\n   at fail (test?includePolyfills=yes:17327:3)\n   at throws (test?includePolyfills=yes:17022:4)\n   at Anonymous function (test?includePolyfills=yes:50147:9)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "function () {\n            [].flat(Symbol());\n        } throws \nfunction TypeError() {\n    [native code]\n}\n",
            "failingSuite": "Array.prototype.flat"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:50655:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": "AssertionError: 1 deepEqual foo\n   at fail (test?includePolyfills=yes:17327:3)\n   at deepEqual (test?includePolyfills=yes:16994:4)\n   at Anonymous function (test?includePolyfills=yes:50798:2)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:50826:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "AbortController passes the feature detect",
            "stack": "AssertionError: false == true\n   at fail (test?includePolyfills=yes:17327:3)\n   at ok (test?includePolyfills=yes:16954:4)\n   at Anonymous function (test?includePolyfills=yes:51264:11)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)",
            "message": "false == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal is a function",
            "stack": "ReferenceError: 'AbortSignal' is undefined\n   at Anonymous function (test?includePolyfills=yes:51275:9)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "'AbortSignal' is undefined",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "stack": "ReferenceError: 'AbortController' is undefined\n   at Anonymous function (test?includePolyfills=yes:51285:13)\n   at callFn (test?includePolyfills=yes:4815:5)\n   at run (test?includePolyfills=yes:4807:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "'AbortController' is undefined",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "ReferenceError: 'AbortController' is undefined\n   at Anonymous function (test?includePolyfills=yes:51295:13)\n   at callFnAsync (test?includePolyfills=yes:4838:5)\n   at run (test?includePolyfills=yes:4785:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "'AbortController' is undefined",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "ReferenceError: 'AbortController' is undefined\n   at Anonymous function (test?includePolyfills=yes:51311:13)\n   at callFnAsync (test?includePolyfills=yes:4838:5)\n   at run (test?includePolyfills=yes:4785:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "'AbortController' is undefined",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "ReferenceError: 'AbortController' is undefined\n   at Anonymous function (test?includePolyfills=yes:51328:13)\n   at callFnAsync (test?includePolyfills=yes:4838:5)\n   at run (test?includePolyfills=yes:4785:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "'AbortController' is undefined",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests fetch without aborting",
            "stack": "ReferenceError: 'AbortController' is undefined\n   at Anonymous function (test?includePolyfills=yes:51342:13)\n   at callFnAsync (test?includePolyfills=yes:4838:5)\n   at run (test?includePolyfills=yes:4785:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "'AbortController' is undefined",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests event listener fires \"abort\" event",
            "stack": "ReferenceError: 'AbortController' is undefined\n   at Anonymous function (test?includePolyfills=yes:51352:13)\n   at callFnAsync (test?includePolyfills=yes:4838:5)\n   at run (test?includePolyfills=yes:4785:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "'AbortController' is undefined",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests signal.aborted is true after abort",
            "stack": "ReferenceError: 'AbortController' is undefined\n   at Anonymous function (test?includePolyfills=yes:51360:13)\n   at callFnAsync (test?includePolyfills=yes:4838:5)\n   at run (test?includePolyfills=yes:4785:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "'AbortController' is undefined",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests event listener doesn't fire \"abort\" event after removeEventListener",
            "stack": "ReferenceError: 'AbortController' is undefined\n   at Anonymous function (test?includePolyfills=yes:51372:13)\n   at callFnAsync (test?includePolyfills=yes:4838:5)\n   at run (test?includePolyfills=yes:4785:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "'AbortController' is undefined",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests signal.onabort called on abort",
            "stack": "ReferenceError: 'AbortController' is undefined\n   at Anonymous function (test?includePolyfills=yes:51382:13)\n   at callFnAsync (test?includePolyfills=yes:4838:5)\n   at run (test?includePolyfills=yes:4785:7)\n   at runTest (test?includePolyfills=yes:5303:5)\n   at Anonymous function (test?includePolyfills=yes:5409:7)\n   at next (test?includePolyfills=yes:5221:7)\n   at Anonymous function (test?includePolyfills=yes:5231:7)\n   at next (test?includePolyfills=yes:5155:7)\n   at Anonymous function (test?includePolyfills=yes:5199:5)\n   at timeslice (test?includePolyfills=yes:416:5)",
            "message": "'AbortController' is undefined",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "CustomEvent",
          "console.time",
          "Array.prototype.copyWithin",
          "HTMLTemplateElement",
          "WeakMap",
          "Object.defineProperty",
          "Element.prototype.inert",
          "String.prototype.@@iterator",
          "WeakSet",
          "console.timeStamp",
          "Array.prototype.entries",
          "String.raw",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "console.markTimeline",
          "NodeList.prototype.@@iterator",
          "Promise.prototype.finally",
          "DOMTokenList.prototype.@@iterator",
          "console.count",
          "String.prototype.trim",
          "console.exception",
          "Object.isExtensible",
          "Object.create",
          "AbortController",
          "IntersectionObserverEntry",
          "Object.isFrozen",
          "console.groupEnd",
          "Object.seal",
          "Map",
          "Set",
          "Symbol",
          "console.groupCollapsed",
          "Object.isSealed",
          "console.timeline",
          "Object.getOwnPropertyNames",
          "Symbol.iterator",
          "console.dirxml",
          "Element.prototype.toggleAttribute",
          "console.debug",
          "Array.prototype.flat",
          "requestIdleCallback",
          "smoothscroll",
          "Array.prototype.keys",
          "Object.preventExtensions",
          "console.timeEnd",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "console.trace",
          "document.currentScript",
          "console.table",
          "Array.prototype.@@iterator",
          "Event",
          "console.timelineEnd",
          "console.group",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    }
  },
  "safari": {
    "12.1": {
      "all": {
        "passed": 1506,
        "failed": 5,
        "failingTests": [
          {
            "result": false,
            "message": "false == true",
            "failingSuite": "smoothscroll",
            "name": "smoothscroll passes the feature detect"
          },
          {
            "result": false,
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript",
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation"
          },
          {
            "result": false,
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim",
            "name": "String.prototype.trim works as expected"
          },
          {
            "result": false,
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute",
            "name": "Element.prototype.toggleAttribute passes the feature detect"
          },
          {
            "result": false,
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin",
            "name": "Array.prototype.copyWithin should check inherited properties as well"
          }
        ],
        "failingSuites": [
          "String.prototype.trim",
          "smoothscroll",
          "Array.prototype.copyWithin",
          "Element.prototype.toggleAttribute",
          "document.currentScript"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "10.1": {
      "all": {
        "passed": 1456,
        "failed": 48,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "message": " === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "message": "e) === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "message": "l) === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "message": "ject Obje === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "message": ") === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "message": ") === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "message": "ction (){ === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "message": "function Symbol() {\n    [native code]\n} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "test?includePolyfills=yes:38040:26\ncallFn@test?includePolyfills=yes:4815:25\nrun@test?includePolyfills=yes:4807:13\nrunTest@test?includePolyfills=yes:5303:13\ntest?includePolyfills=yes:5409:19\ntest?includePolyfills=yes:5231:11\ntest?includePolyfills=yes:5199:9\ntimeslice@test?includePolyfills=yes:416:27",
            "message": "Symbol[\"for\"] is not a function. (In 'Symbol[\"for\"](\"7\")', 'Symbol[\"for\"]' is undefined)",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "test?includePolyfills=yes:38045:25\ncallFn@test?includePolyfills=yes:4815:25\nrun@test?includePolyfills=yes:4807:13\nrunTest@test?includePolyfills=yes:5303:13\ntest?includePolyfills=yes:5409:19\ntest?includePolyfills=yes:5231:11\ntest?includePolyfills=yes:5199:9\ntimeslice@test?includePolyfills=yes:416:27",
            "message": "Symbol[\"for\"] is not a function. (In 'Symbol[\"for\"](\"8\")', 'Symbol[\"for\"]' is undefined)",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "test?includePolyfills=yes:38051:25\ncallFn@test?includePolyfills=yes:4815:25\nrun@test?includePolyfills=yes:4807:13\nrunTest@test?includePolyfills=yes:5303:13\ntest?includePolyfills=yes:5409:19\ntest?includePolyfills=yes:5231:11\ntest?includePolyfills=yes:5199:9\ntimeslice@test?includePolyfills=yes:416:27",
            "message": "Symbol[\"for\"] is not a function. (In 'Symbol[\"for\"](key)', 'Symbol[\"for\"]' is undefined)",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests Request object has .signal",
            "message": "undefined == true",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "test?includePolyfills=yes:4699:28",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "test?includePolyfills=yes:4699:28",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          },
          {
            "result": false,
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "test?includePolyfills=yes:4699:28",
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController"
          }
        ],
        "failingSuites": [
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Array.prototype.copyWithin",
          "Set",
          "DOMTokenList.prototype.@@iterator",
          "WeakMap",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.from",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Array.prototype.@@iterator",
          "AbortController",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "smoothscroll",
          "Array.prototype.keys",
          "NodeList.prototype.@@iterator",
          "Map",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "11.1": {
      "all": {
        "passed": 1456,
        "failed": 48,
        "failingTests": [
          {
            "result": false,
            "message": "false == true",
            "failingSuite": "smoothscroll",
            "name": "smoothscroll passes the feature detect"
          },
          {
            "result": false,
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript",
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation"
          },
          {
            "result": false,
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap",
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]"
          },
          {
            "result": false,
            "message": " === 1",
            "failingSuite": "Symbol.prototype.description",
            "name": "Symbol.prototype.description works with numbers"
          },
          {
            "result": false,
            "message": "e) === true",
            "failingSuite": "Symbol.prototype.description",
            "name": "Symbol.prototype.description works with booleans"
          },
          {
            "result": false,
            "message": "l) === null",
            "failingSuite": "Symbol.prototype.description",
            "name": "Symbol.prototype.description works with null"
          },
          {
            "result": false,
            "message": "ject Obje === [object Object]",
            "failingSuite": "Symbol.prototype.description",
            "name": "Symbol.prototype.description works with objects"
          },
          {
            "result": false,
            "message": ") === /./",
            "failingSuite": "Symbol.prototype.description",
            "name": "Symbol.prototype.description works with regexes"
          },
          {
            "result": false,
            "message": ") === NaN",
            "failingSuite": "Symbol.prototype.description",
            "name": "Symbol.prototype.description works with NaNs"
          },
          {
            "result": false,
            "message": "ction (){ === function (){}",
            "failingSuite": "Symbol.prototype.description",
            "name": "Symbol.prototype.description works with functions"
          },
          {
            "result": false,
            "message": "false == true",
            "failingSuite": "Symbol.match",
            "name": "Symbol.match passes the feature detect"
          },
          {
            "result": false,
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match",
            "name": "Symbol.match has the well known symbol match as static properties on Symbol"
          },
          {
            "result": false,
            "message": "false == true",
            "failingSuite": "Symbol.iterator",
            "name": "Symbol.iterator passes the feature detect"
          },
          {
            "result": false,
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator",
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol"
          },
          {
            "result": false,
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable",
            "name": "Symbol.isConcatSpreadable passes the feature detect"
          },
          {
            "result": false,
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable",
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol"
          },
          {
            "result": false,
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance",
            "name": "Symbol.hasInstance passes the feature detect"
          },
          {
            "result": false,
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance",
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol"
          },
          {
            "result": false,
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator",
            "name": "Symbol.asyncIterator passes the feature detect"
          },
          {
            "result": false,
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator",
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol"
          },
          {
            "result": false,
            "message": "false == true",
            "failingSuite": "Symbol",
            "name": "Symbol passes the feature detect"
          },
          {
            "result": false,
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol",
            "name": "Symbol should throw if being used via `new`"
          },
          {
            "result": false,
            "message": "function Symbol() {\n    [native code]\n} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol",
            "name": "Symbol should have Symbol as the constructor property"
          },
          {
            "result": false,
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "failingSuite": "Symbol",
            "name": "Symbol has for, and keyFor static methods"
          },
          {
            "result": false,
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol",
            "name": "Symbol Symbol.keyFor should throw if not given a symbol"
          },
          {
            "result": false,
            "message": "Symbol[\"for\"] is not a function. (In 'Symbol[\"for\"](\"7\")', 'Symbol[\"for\"]' is undefined)",
            "failingSuite": "Symbol",
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "test?includePolyfills=yes:38040:26\ncallFn@test?includePolyfills=yes:4815:25\nrun@test?includePolyfills=yes:4807:13\nrunTest@test?includePolyfills=yes:5303:13\ntest?includePolyfills=yes:5409:19\ntest?includePolyfills=yes:5231:11\ntest?includePolyfills=yes:5199:9\ntimeslice@test?includePolyfills=yes:416:27"
          },
          {
            "result": false,
            "message": "Symbol[\"for\"] is not a function. (In 'Symbol[\"for\"](\"8\")', 'Symbol[\"for\"]' is undefined)",
            "failingSuite": "Symbol",
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "test?includePolyfills=yes:38045:25\ncallFn@test?includePolyfills=yes:4815:25\nrun@test?includePolyfills=yes:4807:13\nrunTest@test?includePolyfills=yes:5303:13\ntest?includePolyfills=yes:5409:19\ntest?includePolyfills=yes:5231:11\ntest?includePolyfills=yes:5199:9\ntimeslice@test?includePolyfills=yes:416:27"
          },
          {
            "result": false,
            "message": "Symbol[\"for\"] is not a function. (In 'Symbol[\"for\"](key)', 'Symbol[\"for\"]' is undefined)",
            "failingSuite": "Symbol",
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "test?includePolyfills=yes:38051:25\ncallFn@test?includePolyfills=yes:4815:25\nrun@test?includePolyfills=yes:4807:13\nrunTest@test?includePolyfills=yes:5303:13\ntest?includePolyfills=yes:5409:19\ntest?includePolyfills=yes:5231:11\ntest?includePolyfills=yes:5199:9\ntimeslice@test?includePolyfills=yes:416:27"
          },
          {
            "result": false,
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator",
            "name": "String.prototype.@@iterator passes the feature detect"
          },
          {
            "result": false,
            "message": "false == true",
            "failingSuite": "Set",
            "name": "Set passes the feature detect"
          },
          {
            "result": false,
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator",
            "name": "NodeList.prototype.@@iterator passes the feature detect"
          },
          {
            "result": false,
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator",
            "name": "NodeList.prototype.@@iterator exists"
          },
          {
            "result": false,
            "message": "false == true",
            "failingSuite": "Map",
            "name": "Map passes the feature detect"
          },
          {
            "result": false,
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute",
            "name": "Element.prototype.toggleAttribute passes the feature detect"
          },
          {
            "result": false,
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator",
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect"
          },
          {
            "result": false,
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator",
            "name": "DOMTokenList.prototype.@@iterator exists"
          },
          {
            "result": false,
            "message": "false == true",
            "failingSuite": "Array.prototype.keys",
            "name": "Array.prototype.keys passes the feature detect"
          },
          {
            "result": false,
            "message": "false == true",
            "failingSuite": "Array.prototype.entries",
            "name": "Array.prototype.entries passes the feature detect"
          },
          {
            "result": false,
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin",
            "name": "Array.prototype.copyWithin should check inherited properties as well"
          },
          {
            "result": false,
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator",
            "name": "Array.prototype.@@iterator passes the feature detect"
          },
          {
            "result": false,
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from",
            "name": "Array.from returns an array with Iterable can convert from Map"
          },
          {
            "result": false,
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from",
            "name": "Array.from returns an array with Iterable can convert from map iterator"
          },
          {
            "result": false,
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from",
            "name": "Array.from returns an array with Iterable can convert from Set"
          },
          {
            "result": false,
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from",
            "name": "Array.from returns an array with Iterable can convert from set iterator"
          },
          {
            "result": false,
            "message": "undefined == true",
            "failingSuite": "AbortController",
            "name": "AbortController AbortSignal basic tests Request object has .signal"
          },
          {
            "result": false,
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController",
            "name": "AbortController AbortSignal basic tests abort during fetch",
            "stack": "test?includePolyfills=yes:4699:28"
          },
          {
            "result": false,
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController",
            "name": "AbortController AbortSignal basic tests abort during fetch when Request has signal",
            "stack": "test?includePolyfills=yes:4699:28"
          },
          {
            "result": false,
            "message": "Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
            "failingSuite": "AbortController",
            "name": "AbortController AbortSignal basic tests abort before fetch started",
            "stack": "test?includePolyfills=yes:4699:28"
          }
        ],
        "failingSuites": [
          "String.prototype.@@iterator",
          "smoothscroll",
          "Symbol.prototype.description",
          "Array.prototype.entries",
          "Symbol.isConcatSpreadable",
          "Array.prototype.keys",
          "Symbol.hasInstance",
          "NodeList.prototype.@@iterator",
          "Array.prototype.@@iterator",
          "Array.from",
          "Element.prototype.toggleAttribute",
          "Array.prototype.copyWithin",
          "Symbol",
          "Set",
          "Symbol.match",
          "WeakMap",
          "Symbol.asyncIterator",
          "Map",
          "DOMTokenList.prototype.@@iterator",
          "Symbol.iterator",
          "AbortController",
          "document.currentScript"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "13.0": {
      "all": {
        "passed": 1506,
        "failed": 5,
        "failingTests": [
          {
            "result": false,
            "message": "false == true",
            "failingSuite": "smoothscroll",
            "name": "smoothscroll passes the feature detect"
          },
          {
            "result": false,
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript",
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation"
          },
          {
            "result": false,
            "message": "removes all whitespaces",
            "failingSuite": "String.prototype.trim",
            "name": "String.prototype.trim works as expected"
          },
          {
            "result": false,
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute",
            "name": "Element.prototype.toggleAttribute passes the feature detect"
          },
          {
            "result": false,
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin",
            "name": "Array.prototype.copyWithin should check inherited properties as well"
          }
        ],
        "failingSuites": [
          "String.prototype.trim",
          "smoothscroll",
          "Array.prototype.copyWithin",
          "Element.prototype.toggleAttribute",
          "document.currentScript"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    },
    "9.1": {
      "all": {
        "passed": 1459,
        "failed": 45,
        "failingTests": [
          {
            "result": false,
            "name": "smoothscroll passes the feature detect",
            "stack": null,
            "message": "false == true",
            "failingSuite": "smoothscroll"
          },
          {
            "result": false,
            "name": "document.currentScript returns the current script element when invoked during synchronous evaluation",
            "stack": null,
            "message": " include http://localhost:9876/base/polyfills/document/currentScript/tests.js",
            "failingSuite": "document.currentScript"
          },
          {
            "result": false,
            "name": "console.time console time()",
            "stack": null,
            "message": "function () {\n\t\t\tconsole.time();\n\t\t} !throws undefined",
            "failingSuite": "console.time"
          },
          {
            "result": false,
            "name": "WeakMap WeakMap.prototype[Symbol.toStringTag]",
            "stack": null,
            "message": "undefined === WeakMap",
            "failingSuite": "WeakMap"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with numbers",
            "stack": null,
            "message": " === 1",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with booleans",
            "stack": null,
            "message": "e) === true",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with null",
            "stack": null,
            "message": "l) === null",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with objects",
            "stack": null,
            "message": "ject Obje === [object Object]",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with regexes",
            "stack": null,
            "message": ") === /./",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with NaNs",
            "stack": null,
            "message": ") === NaN",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.prototype.description works with functions",
            "stack": null,
            "message": "ction (){ === function (){}",
            "failingSuite": "Symbol.prototype.description"
          },
          {
            "result": false,
            "name": "Symbol.match passes the feature detect",
            "stack": null,
            "message": "false == true",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.match has the well known symbol match as static properties on Symbol",
            "stack": null,
            "message": "undefined != undefined",
            "failingSuite": "Symbol.match"
          },
          {
            "result": false,
            "name": "Symbol.iterator passes the feature detect",
            "stack": null,
            "message": "false == true",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.iterator has the well known symbol iterator as static properties on Symbol",
            "stack": null,
            "message": "undefined != undefined",
            "failingSuite": "Symbol.iterator"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable passes the feature detect",
            "stack": null,
            "message": "false == true",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.isConcatSpreadable has the well known symbol isConcatSpreadable as static properties on Symbol",
            "stack": null,
            "message": "undefined != undefined",
            "failingSuite": "Symbol.isConcatSpreadable"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance passes the feature detect",
            "stack": null,
            "message": "false == true",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.hasInstance has the well known symbol hasInstance as static properties on Symbol",
            "stack": null,
            "message": "undefined != undefined",
            "failingSuite": "Symbol.hasInstance"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator passes the feature detect",
            "stack": null,
            "message": "false == true",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol.asyncIterator has the well known symbol async-iterator as static properties on Symbol",
            "stack": null,
            "message": "undefined != undefined",
            "failingSuite": "Symbol.asyncIterator"
          },
          {
            "result": false,
            "name": "Symbol passes the feature detect",
            "stack": null,
            "message": "false == true",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should throw if being used via `new`",
            "stack": null,
            "message": "function () {\n\t\t// eslint-disable-next-line no-new-symbol\n\t\treturn new Symbol();\n\t} throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol should have Symbol as the constructor property",
            "stack": null,
            "message": "function Symbol() {\n    [native code]\n} == function Symbol(description) {\n        var desc = String(description);\n        var sym = NativeSymbol(desc);\n        if (description === undefined) {\n            symbolDescriptionStore[sym] = true;\n        }\n        return sym;\n    }",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol has for, and keyFor static methods",
            "stack": null,
            "message": "undefined instanceof function Function() {\n    [native code]\n}",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should throw if not given a symbol",
            "stack": null,
            "message": "function () {\n\t\treturn Symbol.keyFor(Symbol(\"4\"));\n\t} !throws undefined",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should create new symbol if can not find symbol in global registry",
            "stack": "test?includePolyfills=yes:38040:26\ncallFn@test?includePolyfills=yes:4815:25\nrun@test?includePolyfills=yes:4807:13\nrunTest@test?includePolyfills=yes:5303:13\ntest?includePolyfills=yes:5409:19\nnext@test?includePolyfills=yes:5221:16\ntest?includePolyfills=yes:5231:11\nnext@test?includePolyfills=yes:5155:16\ntest?includePolyfills=yes:5199:9\ntimeslice@test?includePolyfills=yes:416:27",
            "message": "Symbol[\"for\"] is not a function. (In 'Symbol[\"for\"](\"7\")', 'Symbol[\"for\"]' is undefined)",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol[\"for\"] should return symbol if can find symbol in global registry",
            "stack": "test?includePolyfills=yes:38045:25\ncallFn@test?includePolyfills=yes:4815:25\nrun@test?includePolyfills=yes:4807:13\nrunTest@test?includePolyfills=yes:5303:13\ntest?includePolyfills=yes:5409:19\nnext@test?includePolyfills=yes:5221:16\ntest?includePolyfills=yes:5231:11\nnext@test?includePolyfills=yes:5155:16\ntest?includePolyfills=yes:5199:9\ntimeslice@test?includePolyfills=yes:416:27",
            "message": "Symbol[\"for\"] is not a function. (In 'Symbol[\"for\"](\"8\")', 'Symbol[\"for\"]' is undefined)",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "Symbol Symbol.keyFor should return key of symbol if can find symbol in global registry",
            "stack": "test?includePolyfills=yes:38051:25\ncallFn@test?includePolyfills=yes:4815:25\nrun@test?includePolyfills=yes:4807:13\nrunTest@test?includePolyfills=yes:5303:13\ntest?includePolyfills=yes:5409:19\nnext@test?includePolyfills=yes:5221:16\ntest?includePolyfills=yes:5231:11\nnext@test?includePolyfills=yes:5155:16\ntest?includePolyfills=yes:5199:9\ntimeslice@test?includePolyfills=yes:416:27",
            "message": "Symbol[\"for\"] is not a function. (In 'Symbol[\"for\"](key)', 'Symbol[\"for\"]' is undefined)",
            "failingSuite": "Symbol"
          },
          {
            "result": false,
            "name": "String.prototype.@@iterator passes the feature detect",
            "stack": null,
            "message": "false == true",
            "failingSuite": "String.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Set passes the feature detect",
            "stack": null,
            "message": "false == true",
            "failingSuite": "Set"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator passes the feature detect",
            "stack": null,
            "message": "false == true",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "NodeList.prototype.@@iterator exists",
            "stack": null,
            "message": "undefined  undefined",
            "failingSuite": "NodeList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Map passes the feature detect",
            "stack": null,
            "message": "false == true",
            "failingSuite": "Map"
          },
          {
            "result": false,
            "name": "Element.prototype.toggleAttribute passes the feature detect",
            "stack": null,
            "message": "false == true",
            "failingSuite": "Element.prototype.toggleAttribute"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator passes the feature detect",
            "stack": null,
            "message": "false == true",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "DOMTokenList.prototype.@@iterator exists",
            "stack": null,
            "message": "undefined  undefined",
            "failingSuite": "DOMTokenList.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.prototype.keys passes the feature detect",
            "stack": null,
            "message": "false == true",
            "failingSuite": "Array.prototype.keys"
          },
          {
            "result": false,
            "name": "Array.prototype.entries passes the feature detect",
            "stack": null,
            "message": "false == true",
            "failingSuite": "Array.prototype.entries"
          },
          {
            "result": false,
            "name": "Array.prototype.copyWithin should check inherited properties as well",
            "stack": null,
            "message": "1 deepEqual foo",
            "failingSuite": "Array.prototype.copyWithin"
          },
          {
            "result": false,
            "name": "Array.prototype.@@iterator passes the feature detect",
            "stack": null,
            "message": "false == true",
            "failingSuite": "Array.prototype.@@iterator"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Map",
            "stack": null,
            "message": " deepEqual 1,2,3,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from map iterator",
            "stack": null,
            "message": " deepEqual 2,4",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from Set",
            "stack": null,
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          },
          {
            "result": false,
            "name": "Array.from returns an array with Iterable can convert from set iterator",
            "stack": null,
            "message": " deepEqual 1,2,3,4,",
            "failingSuite": "Array.from"
          }
        ],
        "failingSuites": [
          "console.time",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Set",
          "DOMTokenList.prototype.@@iterator",
          "Array.prototype.copyWithin",
          "WeakMap",
          "Symbol",
          "String.prototype.@@iterator",
          "Array.from",
          "document.currentScript",
          "Array.prototype.entries",
          "Symbol.iterator",
          "Array.prototype.@@iterator",
          "Element.prototype.toggleAttribute",
          "Symbol.match",
          "Symbol.isConcatSpreadable",
          "smoothscroll",
          "NodeList.prototype.@@iterator",
          "Map",
          "Array.prototype.keys",
          "Symbol.prototype.description"
        ],
        "testedSuites": [
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "smoothscroll",
          "setImmediate",
          "setImmediate",
          "setImmediate",
          "screen.orientation",
          "requestIdleCallback",
          "requestAnimationFrame",
          "matchMedia",
          "location.origin",
          "globalThis",
          "globalThis",
          "document.visibilityState",
          "document.querySelector",
          "document.getElementsByClassName",
          "document.currentScript",
          "console.warn",
          "console.warn",
          "console.trace",
          "console.trace",
          "console.timelineEnd",
          "console.timelineEnd",
          "console.timeline",
          "console.timeline",
          "console.timeStamp",
          "console.timeStamp",
          "console.timeEnd",
          "console.timeEnd",
          "console.time",
          "console.time",
          "console.table",
          "console.table",
          "console.markTimeline",
          "console.markTimeline",
          "console.log",
          "console.log",
          "console.info",
          "console.info",
          "console.groupEnd",
          "console.groupEnd",
          "console.groupCollapsed",
          "console.groupCollapsed",
          "console.group",
          "console.group",
          "console.exception",
          "console.exception",
          "console.error",
          "console.error",
          "console.dirxml",
          "console.dirxml",
          "console.dir",
          "console.dir",
          "console.debug",
          "console.debug",
          "console.count",
          "console.count",
          "console.assert",
          "console.assert",
          "console",
          "console",
          "atob",
          "XMLHttpRequest",
          "WeakSet",
          "WeakMap",
          "UserTiming",
          "URL",
          "Symbol.unscopables",
          "Symbol.toStringTag",
          "Symbol.toPrimitive",
          "Symbol.split",
          "Symbol.species",
          "Symbol.search",
          "Symbol.replace",
          "Symbol.prototype.description",
          "Symbol.match",
          "Symbol.iterator",
          "Symbol.isConcatSpreadable",
          "Symbol.hasInstance",
          "Symbol.asyncIterator",
          "Symbol",
          "String.raw",
          "String.prototype.trim",
          "String.prototype.sup",
          "String.prototype.sub",
          "String.prototype.strike",
          "String.prototype.startsWith",
          "String.prototype.small",
          "String.prototype.repeat",
          "String.prototype.padStart",
          "String.prototype.padEnd",
          "String.prototype.normalize",
          "String.prototype.link",
          "String.prototype.italics",
          "String.prototype.includes",
          "String.prototype.fontsize",
          "String.prototype.fontcolor",
          "String.prototype.fixed",
          "String.prototype.endsWith",
          "String.prototype.codePointAt",
          "String.prototype.codePointAt",
          "String.prototype.bold",
          "String.prototype.blink",
          "String.prototype.big",
          "String.prototype.anchor",
          "String.prototype.@@iterator",
          "String.fromCodePoint",
          "Set",
          "Set",
          "RegExp.prototype.flags",
          "Reflect.setPrototypeOf",
          "Reflect.set",
          "Reflect.preventExtensions",
          "Reflect.ownKeys",
          "Reflect.isExtensible",
          "Reflect.has",
          "Reflect.getPrototypeOf",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.getOwnPropertyDescriptor",
          "Reflect.get",
          "Reflect.deleteProperty",
          "Reflect.defineProperty",
          "Reflect.construct",
          "Reflect.apply",
          "Reflect",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise.prototype.finally",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Promise",
          "Object.values",
          "Object.setPrototypeOf",
          "Object.seal",
          "Object.preventExtensions",
          "Object.keys",
          "Object.isSealed",
          "Object.isFrozen",
          "Object.isExtensible",
          "Object.is",
          "Object.getPrototypeOf",
          "Object.getOwnPropertyNames",
          "Object.getOwnPropertyDescriptors",
          "Object.getOwnPropertyDescriptor",
          "Object.getOwnPropertyDescriptor",
          "Object.fromEntries",
          "Object.freeze",
          "Object.entries",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperty",
          "Object.defineProperties",
          "Object.create",
          "Object.assign",
          "Number.parseInt",
          "Number.parseFloat",
          "Number.isSafeInteger",
          "Number.isNaN",
          "Number.isInteger",
          "Number.isFinite",
          "Number.MIN_SAFE_INTEGER",
          "Number.MAX_SAFE_INTEGER",
          "Number.Epsilon",
          "NodeList.prototype.forEach",
          "NodeList.prototype.@@iterator",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Node.prototype.contains",
          "Math.trunc",
          "Math.tanh",
          "Math.sinh",
          "Math.sign",
          "Math.log2",
          "Math.log1p",
          "Math.log10",
          "Math.imul",
          "Math.hypot",
          "Math.expm1",
          "Math.cosh",
          "Math.clz32",
          "Math.cbrt",
          "Math.atanh",
          "Math.asinh",
          "Math.acosh",
          "Map",
          "Map",
          "Map",
          "Map",
          "Map",
          "IntersectionObserverEntry",
          "IntersectionObserverEntry",
          "HTMLTemplateElement",
          "HTMLCanvasElement.prototype.toBlob",
          "Function.prototype.name",
          "Function.prototype.bind",
          "Event.hashchange",
          "Event.focusin",
          "Event.focusin",
          "Event",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.toggleAttribute",
          "Element.prototype.replaceWith",
          "Element.prototype.remove",
          "Element.prototype.prepend",
          "Element.prototype.matches",
          "Element.prototype.inert",
          "Element.prototype.inert",
          "Element.prototype.dataset",
          "Element.prototype.dataset",
          "Element.prototype.closest",
          "Element.prototype.cloneNode",
          "Element.prototype.classList",
          "Element.prototype.before",
          "Element.prototype.append",
          "Element.prototype.after",
          "DocumentFragment.prototype.prepend",
          "DocumentFragment.prototype.append",
          "DocumentFragment",
          "Date.prototype.toISOString",
          "DOMTokenList.prototype.@@iterator",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "DOMRect",
          "CustomEvent",
          "Blob",
          "Array.prototype.values",
          "Array.prototype.some",
          "Array.prototype.reduceRight",
          "Array.prototype.reduce",
          "Array.prototype.map",
          "Array.prototype.lastIndexOf",
          "Array.prototype.keys",
          "Array.prototype.indexOf",
          "Array.prototype.includes",
          "Array.prototype.forEach",
          "Array.prototype.forEach",
          "Array.prototype.flatMap",
          "Array.prototype.flat",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.findIndex",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.find",
          "Array.prototype.filter",
          "Array.prototype.fill",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.every",
          "Array.prototype.entries",
          "Array.prototype.copyWithin",
          "Array.prototype.@@iterator",
          "Array.of",
          "Array.of",
          "Array.isArray",
          "Array.isArray",
          "Array.isArray",
          "Array.from",
          "Array.from",
          "Array.from",
          "Array.from",
          "AbortController",
          "AbortController",
          "AbortController"
        ]
      }
    }
  }
}
